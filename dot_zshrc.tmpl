# Global
export LANG=en_US.UTF-8
export GHQ_ROOT="$HOME/ghq"
export PIPENV_VENV_IN_PROJECT=1
export TODAY=(date +'%Y/%m/%d')

# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

{{ if (eq .chezmoi.hostname "azusa") }}
export GTK_IM_MODULE="fcitx"
export QT_IM_MODULE="fcitx"
export XMODIFIERS="@im=fcitx"
xmodmap ~/.Xmodmap
{{ end }}

{{ if (eq .chezmoi.hostname "TanakaPC") }}
export GITHUB_USERNAME={{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").github_username.value }}
export WIN_HOME={{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").win_home_path.value }}
export OBSIDIAN_VAULT_ROOT={{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").obsidian_vault_root_path.value }}
{{ else if (eq .chezmoi.hostname "azusa") }}
export GITHUB_USERNAME={{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").github_username.value }}
export OBSIDIAN_VAULT_ROOT=""
{{ else }}
export GITHUB_USERNAME={{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").github_username.value }}
export WIN_HOME={{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").win_home_path.value }}
export OBSIDIAN_VAULT_ROOT={{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").obsidian_vault_root_path.value }}
{{ end }}

set -x WORKSPACE "$GHQ_ROOT/github.com/$GITHUB_USERNAME"

{{ if (ne .chezmoi.hostname "azusa") }}
set -x windl "$WIN_HOME/Downloads"
set -x WIN_DESKTOP "$WIN_HOME/Desktop"
set -x WIN_DOCUMENTS "$WIN_HOME/Documents"

set -x obsidian_vault_root_path "$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"
set -x obsidian_vault_path $obsidian_vault_root_path
set -x obsidian_dailynote_path $obsidian_vault_path/001_DailyNotes
set -x obsidian $obsidian_dailynote_path
{{ end }}

alias f="fuck"
alias mkdir="mkdir -p"
alias rm="rm -i"

# ls alias
alias ls="eza"
alias l1="ls -1"
alias lt="ls --tree"
alias ll="ls -l"
alias la="ls -la"
alias lat="ls -l -a --tree"
alias lta="ls --tree -a"

export PATH="/usr/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

#Ubuntu
export PATH="/bin:$PATH"
export PATH="/usr/games:$PATH"
export PATH="/usr/sbin:$PATH"
export PATH="/usr/local/games:$PATH"
export PATH="/sbin:$PATH"
export PATH="/snap/bin:$PATH"
export PATH="$HOME/.fzf/bin:$PATH"
export PATH="$HOME/.local/bin/:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH="$HOME/.dotnet/tools/:$PATH"
export PATH="$HOME/.gem/ruby/2.7.0/bin/:$PATH"
export PATH="$HOME/depot_tools:$PATH"
export EDITOR=nvim
export NVIM_APPNAME=nvim
export NVIM_CONFIG="$XDG_CONFIG_HOME/$NVIM_APPNAME"
export NVIM_DATA="$XDG_DATA_HOME/$NVIM_APPNAME"
export NVIM_STATE="$XDG_STATE_HOME/$NVIM_APPNAME"
export NVIM_CACHE="$XDG_CACHE_HOME/$NVIM_APPNAME"

alias pip="python3 -m pip"
alias vim="nvim"
if command -v asdf >/dev/null 2>&1; then
    . $HOME/.asdf/asdf.sh
fi

# chezmoi
export CHEZMOI_DIR="$XDG_DATA_HOME/chezmoi"

# starship config
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/starship/starship.toml"
export STARSHIP_CACHE="$XDG_CONFIG_HOME/starship/cache"
if command -v starship>/dev/null 2>&1; then
    eval "$(starship init zsh)"
fi

# zoxide
if command -v zoxide>/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
end

# fly.io
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# pnpm
# TODO:
export PNPM_HOME="$XDG_DATA_HOME/pnpm"
export PATH="$PNPM_HOME:$PATH"
if test -f "$XDG_CONFIG_HOME/tabtab/zsh/__tabtab.zsh"; then
    . "$XDG_CONFIG_HOME/tabtab/zsh/__tabtab.zsh"
fi

# broot
if command -v broot>/dev/null 2>&1; then
    source "$XDG_CONFIG_HOME/broot/launcher/bash/br"
fi

# Rye
if command -v rye>/dev/null 2>&1; then
    source "$HOME/.rye/env"
fi

# Linuxbrew
if command -v zoxide>/dev/null 2>&1; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# walk
function lk {
  cd "$(walk "$@")"
}

# rtx
#export RTX_DATA_DIR=$HOME/.rtx
#export RTX_CACHE_DIR=$RTX_DATA_DIR/cache

# luarocks
export PATH="$HOME/.luarocks/bin:$PATH"
export LUA_PATH="/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/local/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"

# aqua
# The directory path where aqua install tools
# default (linux and macOS): ${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua
# default (windows): ${HOME/AppData/Local}/aquaproj-aqua
export AQUA_ROOT_DIR="$XDG_DATA_HOME/aqua"
export AQUA_CONFIG_DIR="$XDG_CONFIG_HOME/aqua"
export AQUA_BIN="$AQUA_ROOT_DIR/bin"

export PATH="$AQUA_BIN:$PATH"

if command -v aqua>/dev/null 2>&1; then
    # Log level
    #set -x AQUA_LOG_LEVEL "info"
    # configuration file path
    export AQUA_CONFIG="$AQUA_CONFIG_DIR/aqua.yaml"
    # global configuration file paths separated by semicolon :
    export AQUA_GLOBAL_CONFIG="$AQUA_CONFIG"
    # policy file paths separated by semicolon :
    export AQUA_POLICY_CONFIG="$XDG_CONFIG_HOME/aqua/policy.yaml"
    # If true, Policy is disabled (aqua >= v2.1.0)
    # NOTE: It's just idiot to care about security.
    export AQUA_DISABLE_POLICY=true
    # If true, Lazy Install is disabled (aqua >= v2.9.0)
    #export AQUA_DISABLE_LAZY_INSTALL=true
    # The maximum number of packages which are installed in parallel at the same time
    #export AQUA_MAX_PARALLELISM=5
    # GITHUB_TOKEN: GitHub Access Token.
    # This is required to install private repository's package
    #export AQUA_GITHUB_TOKEN=""
    # Log color setting (always|auto|never)
    #export AQUA_LOG_COLOR="always"
    # The progress bar is disabled by default, but you can enable it by setting the environment variable AQUA_PROGRESS_BAR to true
    export AQUA_PROGRESS_BAR=true
    # Other
    #export AQUA_GOOS=""
    #export AQUA_GOARCH=""
    # AQUA_X_SYS_EXEC
    # https://aquaproj.github.io/docs/reference/execve-2/
    #export AQUA_X_SYS_EXEC=false
    # If true, aqua outputs additional information such as description and link #2027 #2062 (aqua >= v2.9.0)
    #export AQUA_GENERATE_WITH_DETAIL=false
fi

# inshellisense
#if test -f ~/.inshellisense/key-bindings.zsh
#then
#    source ~/.inshellisense/key-bindings.zsh
#fi

# sheldon
export SHELDON_CONFIG_DIR="$XDG_CONFIG_HOME/sheldon/zsh"
export SHELDON_DATA_DIR="$XDG_DATA_HOME/sheldon/zsh"

if command -v sheldon>/dev/null 2>&1; then
    eval "$(sheldon source)"
fi

# PHP composer
export COMPOSER_CONFIG_HOME="$XDG_CONFIG_HOME/composer"
export COMPOSER_BIN_DIR="$COMPOSER_CONFIG_HOME/vendor/bin"

export PATH="$COMPOSER_BIN_DIR:$PATH"

# zeno.zsh
export ZENO_HOME="$XDG_CONFIG_HOME/zeno"

# if disable deno cache command when plugin loaded
#export ZENO_DISABLE_EXECUTE_CACHE_COMMAND=1

# if enable fzf-tmux
#export ZENO_ENABLE_FZF_TMUX=1

# if setting fzf-tmux options
#export ZENO_FZF_TMUX_OPTIONS="-p"

# Experimental: Use UNIX Domain Socket
#export ZENO_ENABLE_SOCK=1

# if disable builtin completion
#export ZENO_DISABLE_BUILTIN_COMPLETION=1

# default
export ZENO_GIT_CAT="bat --color=always"

# default
export ZENO_GIT_TREE="exa --tree"

if [[ -n $ZENO_LOADED ]]; then
  bindkey ' '  zeno-auto-snippet

  # fallback if snippet not matched (default: self-insert)
  #export ZENO_AUTO_SNIPPET_FALLBACK=self-insert

  # if you use zsh's incremental search
  #bindkey -M isearch ' ' self-insert

  bindkey '^m' zeno-auto-snippet-and-accept-line

  bindkey '^i' zeno-completion

  bindkey '^x '  zeno-insert-space
  bindkey '^x^m' accept-line
  bindkey '^x^z' zeno-toggle-auto-snippet

  # fallback if completion not matched
  # (default: fzf-completion if exists; otherwise expand-or-complete)
  #export ZENO_COMPLETION_FALLBACK=expand-or-complete
fi

export ZSH_CACHE_DIR="$XDG_CACHE_HOME/zsh"

# delete duplicate path
typeset -U PATH
