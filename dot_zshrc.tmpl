# Global
export LANG=en_US.UTF-8
export GHQ_ROOT="$HOME/ghq"
export PIPENV_VENV_IN_PROJECT=1
export TODAY=(date +'%Y/%m/%d')

# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

{{ if (eq .chezmoi.hostname "TanakaPC") }}
export WORKSPACE={{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").workspace_path.value }}
export WIN_HOME={{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").win_home_path.value }}
{{ else }}
{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").zshrc_workspace.value }}
{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").zshrc_win_home.value }}
{{ end }}

alias f="fuck"
alias mkdir="mkdir -p"
alias rm="rm -i"

# ls alias
alias ls="eza"
alias l1="ls -1"
alias lt="ls --tree"
alias ll="ls -l"
alias la="ls -la"
alias lat="ls -l -a --tree"
alias lta="ls --tree -a"

export PATH="/usr/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

export STARSHIP_CONFIG="$HOME/.config/starship/starship.toml"
export STARSHIP_CACHE="$HOME/.config/starship/cache"

#Ubuntu
export PATH="/bin:$PATH"
export PATH="/usr/games:$PATH"
export PATH="/usr/sbin:$PATH"
export PATH="/usr/local/games:$PATH"
export PATH="/sbin:$PATH"
export PATH="/snap/bin:$PATH"
export PATH="$HOME/.fzf/bin:$PATH"
export PATH="$HOME/.local/bin/:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH="$HOME/.dotnet/tools/:$PATH"
export PATH="$HOME/.gem/ruby/2.7.0/bin/:$PATH"
export PATH="$HOME/depot_tools:$PATH"
export EDITOR=nvim
export NVIM_APPNAME=nvim
export NVIM_CONFIG="$HOME/.config/nvim"

alias pip="python3 -m pip"
alias vim="nvim"
. $HOME/.asdf/asdf.sh

# starship config
eval "$(starship init zsh)"

if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

# zoxide
eval "$(zoxide init zsh)"

# fly.io
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# pnpm
export PNPM_HOME="$HOME/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"
[[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true

# broot
source "$HOME/.config/broot/launcher/bash/br"

# Rye
source "$HOME/.rye/env"

# Linuxbrew
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# walk
function lk {
  cd "$(walk "$@")"
}

# rtx
#export RTX_DATA_DIR=$HOME/.rtx
#export RTX_CACHE_DIR=$RTX_DATA_DIR/cache

# luarocks
export PATH="$HOME/.luarocks/bin:$PATH"
export LUA_PATH="/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/local/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"

# aqua
export PATH="${AQUA_ROOT_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua}/bin:$PATH"

# inshellisense
#if test -f ~/.inshellisense/key-bindings.zsh
#then
#    source ~/.inshellisense/key-bindings.zsh
#fi

# sheldon
export SHELDON_CONFIG_DIR="$XDG_CONFIG_HOME/sheldon/zsh"
export SHELDON_DATA_DIR="$XDG_DATA_HOME/sheldon/zsh"

eval "$(sheldon source)"

# zeno.zsh
export ZENO_HOME="$XDG_CONFIG_HOME/zeno"

# if disable deno cache command when plugin loaded
#export ZENO_DISABLE_EXECUTE_CACHE_COMMAND=1

# if enable fzf-tmux
#export ZENO_ENABLE_FZF_TMUX=1

# if setting fzf-tmux options
#export ZENO_FZF_TMUX_OPTIONS="-p"

# Experimental: Use UNIX Domain Socket
#export ZENO_ENABLE_SOCK=1

# if disable builtin completion
#export ZENO_DISABLE_BUILTIN_COMPLETION=1

# default
export ZENO_GIT_CAT="bat --color=always"

# default
export ZENO_GIT_TREE="exa --tree"

if [[ -n $ZENO_LOADED ]]; then
  bindkey ' '  zeno-auto-snippet

  # fallback if snippet not matched (default: self-insert)
  #export ZENO_AUTO_SNIPPET_FALLBACK=self-insert

  # if you use zsh's incremental search
  #bindkey -M isearch ' ' self-insert

  bindkey '^m' zeno-auto-snippet-and-accept-line

  bindkey '^i' zeno-completion

  bindkey '^x '  zeno-insert-space
  bindkey '^x^m' accept-line
  bindkey '^x^z' zeno-toggle-auto-snippet

  # fallback if completion not matched
  # (default: fzf-completion if exists; otherwise expand-or-complete)
  #export ZENO_COMPLETION_FALLBACK=expand-or-complete
fi

# delete duplicate path
typeset -U PATH
