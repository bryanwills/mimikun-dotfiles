" ファイルの種類毎に設定ファイルを記述できるようにする
filetype plugin indent off

" XXX: atode kesu
colorscheme zaibatsu

"-------------------------------"
"  Global
"-------------------------------"
" `.vim` is human rights violated
"let g:human_rights = v:false

" TODO: return boolean value
let g:is_mac = has("mac")
" TODO: return boolean value
let g:is_linux = has("linux")
" TODO: return boolean value
let g:is_windows = has("win32")
" TODO: return boolean value
let g:is_wsl = has("wsl")
" TODO: return boolean value
let g:is_unix = has("unix")

" TODO: path_sep
"    -- NOTE:
"    -- Windows: "\"
"    -- Linux: "/"
"    ---@type string
"    local path_sep_char = string.sub(package.config, 1, 1)

"    -- NOTE: self.path_sep = self.is_windows and "\\" or "/"
"    ---@type string
"    self.path_sep = self.is_windows and string.rep(path_sep_char, 2) or path_sep_char

"-------------------------------"
"  Settings
"-------------------------------"
let g:use_copilot = v:false

"-------------------------------"
"  Options
"-------------------------------"
"# True Colorでのシンタックスハイライト
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" マウス操作を有効にする
set mouse=a

" シンタックスハイライトを有効にする
syntax enable

" 使用可能性のある改行コードを指定
set fileformats=unix,dos,mac

" ファイル読み込むときのエンコード
" 左から順に試す
set fileencodings=utf-8,cp932,ucs-bombs,euc-jp

" 全角文字の表示に2文字分使うようにする
set ambiwidth=double

" スワップファイルを作成しないようにする
set noswapfile

" :q したときにバッファを消さず隠して保持しておくようにする
" Linuxの場合のみ設定
" TODO: Improve
if has('unix')
    set hidden
endif

" 行番号を表示する
set number

" 空白文字を可視化する
set list
set listchars=tab:>-,trail:*,nbsp:+,space:⋅

" 良い感じにインデントしてくれるようにする
set smartindent

" ビープ音を画面フラッシュで代替
set visualbell

" TABキーを押したときにtab文字ではなくスペースを入力するようにする
set expandtab

" TABキーを押したときのインデントのスペース個数を指定する
set tabstop=4

" 自動インデントのスペース個数を指定する
set shiftwidth=4

" 検索関係の設定
" 大文字小文字の区別をなくす
set ignorecase

" 検索単語に大文字が含まれていた場合特別な意味があると解釈させる
set smartcase

" 一番下の単語まで行ったら一番上に戻るようにさせる
set wrapscan

" ある行の行頭から前の行の行末に移動したり, 逆に行末から次の行の行頭に移動できるようにする
" BackSpaceキー, SPACEキーで有効になる
" <(←キー),>(→キー)はNORMALモード及びVISUALモードで各キーにこの機能を割り当て
" [(←キー),](→キー)はINSERTモード(置換含む)でこの機能を有効にする
set whichwrap=b,s,<,>,[,]

" NeoVimの無名レジスタ(yでヤンクしたときにコピーする先)とOSのクリップボードを結びつける
" 低スぺック環境ではオフにする
if hostname() == "TanakaPC"
    set clipboard+=unnamedplus
endif

"-------------------------------"
"  Plugins
"-------------------------------"

" Automatic installation on startup
"let s:jetpackfile = expand('<sfile>:p:h') .. '/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim'
"let s:jetpackurl = "https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim"
"if !filereadable(s:jetpackfile)
"  call system(printf('curl -fsSLo %s --create-dirs %s', s:jetpackfile, s:jetpackurl))
"endif

"-------------------------------"
" Plugins
"-------------------------------"
"packadd vim-jetpack
"call jetpack#begin()
" vim-jetpack itself
"Jetpack 'tani/vim-jetpack', {'opt': 1}
" TODO: カテゴリ分けして整理する
" fern.vim
"Jetpack 'lambdalisue/fern.vim'
"Jetpack 'lambdalisue/fern-git-status.vim'
"Jetpack 'lambdalisue/nerdfont.vim'
"Jetpack 'lambdalisue/fern-renderer-nerdfont.vim'
"Jetpack 'lambdalisue/glyph-palette.vim'

" fzf.vim
"Jetpack 'junegunn/fzf'
"Jetpack 'junegunn/fzf.vim'

" denops.vim
"Jetpack 'vim-denops/denops.vim'
"Jetpack 'Omochice/dps-translate-vim'
"Jetpack 'skanehira/denops-docker.vim'
"Jetpack 'willelz/skk-tutorial.vim'

" status line
"Jetpack 'vim-airline/vim-airline'
"Jetpack 'vim-airline/vim-airline-themes'

" syntax highlights
"Jetpack 'nastevens/vim-duckscript'
"Jetpack 'imsnif/kdl.vim'
"Jetpack 'cespare/vim-toml'
"Jetpack 'NoahTheDuke/vim-just'
"Jetpack 'nastevens/vim-cargo-make'
"Jetpack 'alker0/chezmoi.vim'
"Jetpack 'ron-rs/ron.vim'

" utilities
"Jetpack 'vim-jp/vimdoc-ja'
"Jetpack 'mattn/calendar-vim'
"Jetpack 'dstein64/vim-startuptime'
"Jetpack 'thinca/vim-scouter'
"Jetpack 'thinca/vim-quickrun'
"Jetpack 'lambdalisue/gin.vim'
"Jetpack 'airblade/vim-gitgutter'
"Jetpack 'godlygeek/tabular'
"Jetpack 'preservim/vim-markdown'
"Jetpack 'tpope/vim-surround'
"Jetpack 'vim-skk/skkeleton'
"Jetpack 'liuchengxu/vim-which-key'

" colorschemes
"Jetpack 'ghifarit53/tokyonight-vim'
"Jetpack 'cormacrelf/vim-colors-github'
"Jetpack 'voidekh/kyotonight.vim'
"Jetpack 'sainnhe/sonokai'
"Jetpack 'loctvl842/monokai-pro.nvim'
"Jetpack 'crusoexia/vim-monokai'


" coc.nvim
"Jetpack 'neoclide/coc.nvim', {'branch': 'release'}

"call jetpack#end()

" Automatic plugin installation on startup
"for name in jetpack#names()
"  if !jetpack#tap(name)
"    call jetpack#sync()
"    break
"  endif
"endfor

"-------------------------------
" keymaps
"-------------------------------

" ファイル上の1行が画面上では複数行にわたっているとき
" NORMALモード時の j/kで見た目通りに移動できるようにする
nnoremap j gj
nnoremap k gk

" win32yankの設定
nnoremap <silent> <Space>y :.w !win32yank.exe -i<CR><CR>
vnoremap <silent> <Space>y :w !win32yank.exe -i<CR><CR>
nnoremap <silent> <Space>p :r !win32yank.exe -o<CR>
vnoremap <silent> <Space>p :r !win32yank.exe -o<CR>

" Ctrl+Wを押した後にnを押すことで新規タブを開けるようにする
nnoremap <C-w>n <Esc>:enew<Return>

" GUI VIM用の設定
imap <S-CR> <End><CR>
imap <C-S-CR> <Up><End><CR>
nnoremap <S-CR> mzo<ESC>`z
nnoremap <C-S-CR> mzO<ESC>`z

" ESCキー連打でハイライト解除
nmap <Esc><Esc> :nohlsearch<CR><Esc>

"-------------------------------
" neoclide/coc.nvim
"-------------------------------

" <Tab>で候補をナビゲート
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" <Tab>で次、<S+Tab>で前
inoremap <silent><expr> <TAB>
  \ coc#pum#visible() ? coc#pum#next(1):
  \ <SID>check_back_space() ? "\<Tab>" :
  \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" coc.nvim settings
let g:coc_global_extensions = [
    \'coc-css',
    \'coc-deepl',
    \'coc-deno',
    \'coc-eslint',
    \'coc-explorer',
    \'coc-git',
    \'coc-highlight',
    \'coc-html',
    \'coc-html-css-support',
    \'coc-jest',
    \'coc-json',
    \'coc-lists',
    \'coc-lua',
    \'coc-marketplace',
    \'coc-pairs',
    \'@raidou/coc-prettier-v3',
    \'coc-pyright',
    \'coc-rust-analyzer',
    \'coc-solargraph',
    \'coc-toml',
    \'coc-tsserver',
    \'coc-yaml',
    \'@yaegassy/coc-black-formatter',
    \'@yaegassy/coc-mypy',
    \'@yaegassy/coc-nginx',
    \'coc-zig',
\]

"-------------------------------
" Omochice/dps-translate-vim
"-------------------------------

let g:dps_translate_source = "en"
let g:dps_translate_target = "ja"

"-------------------------------
" lambdalisue/fern.vim
"-------------------------------

" Ctrl+nでファイルツリーを表示/非表示する
"nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>

" アイコン表示を有効にする
"let g:fern#renderer = 'nerdfont'

" アイコンに色をつける
"augroup my-glyph-palette
"  autocmd! *
"  autocmd FileType fern call glyph_palette#apply()
"  autocmd FileType nerdtree,startify call glyph_palette#apply()
"augroup END

" ドットファイルを表示させる
"let g:fern#default_hidden = 1

"-------------------------------"
" fzf.vim
"-------------------------------"

" Ctrl+pでファイル検索を開く
" git管理されていれば:GFiles、そうでなければ:Filesを実行する
fun! FzfOmniFiles()
  let is_git = system('git status')
  if v:shell_error
    :Files
  else
    :GFiles
  endif
endfun
nnoremap <C-p> :call FzfOmniFiles()<CR>

" Ctrl+gで文字列検索を開く
" <S-?>でプレビューを表示/非表示する
command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
\ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 3..'}, 'up:60%')
\ : fzf#vim#with_preview({'options': '--exact --delimiter : --nth 3..'}, 'right:50%:hidden', '?'),
\ <bang>0)
nnoremap <C-g> :Rg<CR>

" frでカーソル位置の単語をファイル検索する
nnoremap fr vawy:Rg <C-R>"<CR>

" frで選択した単語をファイル検索する
xnoremap fr y:Rg <C-R>"<CR>

" fbでバッファ検索を開く
nnoremap fb :Buffers<CR>

" fpでバッファの中で1つ前に開いたファイルを開く
nnoremap fp :Buffers<CR><CR>

" flで開いているファイルの文字列検索を開く
nnoremap fl :BLines<CR>

" fmでマーク検索を開く
nnoremap fm :Marks<CR>

" fhでファイル閲覧履歴検索を開く
nnoremap fh :History<CR>

" fcでコミット履歴検索を開く
nnoremap fc :Commits<CR>

"-------------------------------
" ghifarit53/tokyonight-vim
"-------------------------------

" available: night, storm
let g:tokyonight_style = 'night'
let g:tokyonight_enable_italic = 1

"-------------------------------
" cormacrelf/vim-colors-github
"-------------------------------

set background=dark

"-------------------------------"
" airblade/vim-gitgutter
"-------------------------------"
" g]で前の変更箇所へ移動する
"nnoremap g[ :GitGutterPrevHunk<CR>

" g[で次の変更箇所へ移動する
"nnoremap g] :GitGutterNextHunk<CR>

" ghでdiffをハイライトする
"nnoremap gh :GitGutterLineHighlightsToggle<CR>

" gpでカーソル行のdiffを表示する
"nnoremap gp :GitGutterPreviewHunk<CR>

" 記号の色を変更する
"highlight GitGutterAdd ctermfg=green
"highlight GitGutterChange ctermfg=blue
"highlight GitGutterDelete ctermfg=red

" 反映時間を短くする(デフォルトは4000ms)
"set updatetime=250

"-------------------------------
" preservim/vim-markdown
"-------------------------------

" 折りたたみ無効化
let g:vim_markdown_folding_disabled = 1

" YAMLフロントマターの強調表示
let g:vim_markdown_frontmatter = 1


"-------------------------------
" vim-jp/vimdoc-ja
"-------------------------------

set helplang=ja,en

" 末尾なのでこれを入れる
filetype plugin indent on
