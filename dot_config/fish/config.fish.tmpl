# Global
set -x LANG en_US.UTF-8
set -x GHQ_ROOT $HOME/ghq
set -x GHQ_SELECTOR fzf
set -x PIPENV_VENV_IN_PROJECT 1
set -x TODAY (date +"%Y/%m/%d")
set -x TZ "Asia/Tokyo"

# XDG Base Directory
set -x XDG_CONFIG_HOME $HOME/.config
set -x XDG_CACHE_HOME $HOME/.cache
set -x XDG_DATA_HOME $HOME/.local/share
set -x XDG_STATE_HOME $HOME/.local/state

# Fish paths
set -x FISH_CONFIG_DIR $XDG_CONFIG_HOME/fish
set -x FISH_COMPLETIONS_DIR $FISH_CONFIG_DIR/completions
set -x FISH_FUNCTIONS_DIR $FISH_CONFIG_DIR/functions
set -x FISH_CACHE_DIR $XDG_CACHE_HOME/fish

set -x CONFIG_FISH $FISH_CONFIG_DIR/config.fish
set -x CACHE_CONFIG_FISH $FISH_CACHE_DIR/config.fish

{{ if (eq .chezmoi.hostname "azusa") }}
set -x GTK_IM_MODULE "fcitx"
set -x QT_IM_MODULE "fcitx"
set -x XMODIFIERS "@im=fcitx"
{{ end }}

{{ if (eq .chezmoi.hostname "TanakaPC") }}
set -x GITHUB_USERNAME {{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").github_username.value }}
set -x WIN_HOME {{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").win_home_path.value }}
set -x OBSIDIAN_VAULT_ROOT {{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").obsidian_vault_root_path.value }}
{{ else if (eq .chezmoi.hostname "azusa") }}
set -x GITHUB_USERNAME {{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").github_username.value }}
{{ else }}
set -x GITHUB_USERNAME {{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").github_username.value }}
set -x WIN_HOME {{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").win_home_path.value }}
set -x OBSIDIAN_VAULT_ROOT {{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").obsidian_vault_root_path.value }}
{{ end }}

set -x WORKSPACE "$GHQ_ROOT/github.com/$GITHUB_USERNAME"
set -x windl "$WIN_HOME/Downloads"
set -x WIN_DESKTOP "$WIN_HOME/Desktop"
set -x WIN_DOCUMENTS "$WIN_HOME/Documents"

# TODO:
{{ if (ne .chezmoi.hostname "azusa") }}
set -x obsidian_vault_root_path "$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"
set -x obsidian_vault_path $obsidian_vault_root_path
set -x obsidian_dailynote_path $obsidian_vault_path/001_DailyNotes
set -x obsidian $obsidian_dailynote_path
{{ end }}

set -x CHEZMOI_DIR "$XDG_DATA_HOME/chezmoi"

# aliases
alias rm "rm -i"
alias mkdir "mkdir -p"
alias untar "tar xvf"
alias rm gomi
alias patch "patch -p1 <"
alias imgcat "wezterm imgcat"

# abbrs
abbr -a f fuck
abbr -a pueued_enable "systemctl --user enable pueue"
abbr -a pueued_start "systemctl --user start pueue"
abbr -a pueued_restart "systemctl --user restart pueue"
abbr -a ccd "chezmoi cd"
abbr -a chd "chezmoi cd"
abbr -a chec "chezmoi cd"
abbr -a cap "chezmoi apply"
abbr -a chp "chezmoi apply"
abbr -a chep "chezmoi apply"
abbr -a pu pueue
abbr -a puc "pueue clean -s"
abbr -a pucf "pueue clean"
abbr -a puf "pueue follow"
abbr -a pul "pueue log"
abbr -a trash "trashy"

set -x LOCALBIN $HOME/.local/bin

set -x PATH /usr/bin $PATH
set -x PATH /usr/local/bin $PATH
set -x PATH /usr/local/sbin $PATH
set -x PATH $HOME/go/bin $PATH
set -x PATH $HOME/.cargo/bin $PATH

set -x DENO_INSTALL $HOME/.deno
set -x PATH $DENO_INSTALL/bin $PATH

set -x STARSHIP_CONFIG_DIR $XDG_CONFIG_HOME/starship
set -x STARSHIP_CONFIG $STARSHIP_CONFIG_DIR/starship.toml
set -x STARSHIP_CACHE $STARSHIP_CONFIG_DIR/cache

#Ubuntu
set -x PATH /bin $PATH
set -x PATH /usr/games $PATH
set -x PATH /usr/sbin $PATH
set -x PATH /usr/local/games $PATH
set -x PATH /sbin $PATH
set -x PATH /snap/bin $PATH
set -x PATH $HOME/.fzf/bin $PATH
set -x PATH $HOME/.local/bin/ $PATH
set -x PATH $HOME/.npm-global/bin $PATH
set -x PATH $HOME/.dotnet/tools/ $PATH
set -x PATH $HOME/.gem/ruby/2.7.0/bin/ $PATH
set -x PATH $HOME/depot_tools $PATH
set -x PATH /usr/local/go/bin/ $PATH

set -x EDITOR nvim
set -x NVIM_APPNAME nvim

set -x NVIM_CONFIG $XDG_CONFIG_HOME/$NVIM_APPNAME
set -x NVIM_DATA $XDG_DATA_HOME/$NVIM_APPNAME
set -x NVIM_STATE $XDG_STATE_HOME/$NVIM_APPNAME
set -x NVIM_CACHE $XDG_CACHE_HOME/$NVIM_APPNAME

alias pip "python3 -m pip"
alias pipx "python3 -m pipx"

abbr -a open wsl-open
abbr -a zel zellij
alias pueuexec "pueue add --"

# Bun
set -x BUN_INSTALL $HOME/.bun
set -x PATH $BUN_INSTALL/bin $PATH

# fly.io
set -x FLYCTL_INSTALL $HOME/.fly
set -x PATH $FLYCTL_INSTALL/bin $PATH

# pnpm
set -x PNPM_HOME $XDG_DATA_HOME/pnpm
set -x PATH "$PNPM_HOME" $PATH

# work pc only tools?
{{ if (eq .chezmoi.hostname "TanakaPC") }}
# JVM path
set -x JAVA_HOME $XDG_CACHE_HOME/coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_linux_hotspot_8u292b10.tar.gz/jdk8u292-b10
set -x PATH $XDG_CACHE_HOME/coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_linux_hotspot_8u292b10.tar.gz/jdk8u292-b10/bin $PATH

# coursier path
set -x PATH $XDG_DATA_HOME/coursier/bin $PATH
# windowsのpathとかぶる問題防止
alias cs $XDG_DATA_HOME/coursier/bin/cs
{{ end }}

# cabal config
set -x PATH $HOME/.cabal/bin $PATH
set -x PATH $HOME/.ghcup/bin $PATH

# wsl2-ssh-agent
set -x SSH_AUTH_SOCK $HOME/.ssh/wsl2-ssh-agent.sock

# https://github.com/antfu/ni config
set -x NI_CONFIG_FILE $XDG_CONFIG_HOME/ni/.nirc

# codon config
set -x PATH $HOME/.codon/bin $PATH

# ls alias
type -q eza
if test $status -eq 0
    alias ls eza

    # ls abbr
    abbr -a ll "ls -l"
    abbr -a la "ls -a"
    abbr -a lla "ls -l -a"
    abbr -a l1 "ls -1"
    abbr -a ll1 "ls -l -1"
    abbr -a lt "ls --tree"
    abbr -a lta "ls --tree -a"
    abbr -a llt "ls -l --tree"
    abbr -a ll1 "ls -l -1"
    abbr -a lt1 "ls --tree -1"
    abbr -a lat "ls -a --tree"
end

# Rye
set -x PATH $HOME/.rye/shims $PATH

# rtx PATHs
set -x RTX_DATA_DIR $HOME/.rtx
set -x RTX_CACHE_DIR $RTX_DATA_DIR/cache

# luarocks
set -x PATH $HOME/.luarocks/bin $PATH

set -x LUA_PATH "/usr/local/share/lua/5.3/?.lua"
set -x LUA_PATH "/usr/local/share/lua/5.3/?/init.lua" $LUA_PATH
set -x LUA_PATH "/usr/local/lib/lua/5.3/?.lua" $LUA_PATH
set -x LUA_PATH "/usr/local/lib/lua/5.3/?/init.lua" $LUA_PATH
set -x LUA_PATH "./?.lua" $LUA_PATH
set -x LUA_PATH "./?/init.lua" $LUA_PATH
set -x LUA_PATH "$HOME/.luarocks/share/lua/5.3/?.lua" $LUA_PATH
set -x LUA_PATH "$HOME/.luarocks/share/lua/5.3/?/init.lua" $LUA_PATH

set -x LUA_CPATH "/usr/local/lib/lua/5.3/?.so"
set -x LUA_CPATH "/usr/local/lib/lua/5.3/loadall.so" $LUA_CPATH
set -x LUA_CPATH "./?.so" $LUA_CPATH
set -x LUA_CPATH "$HOME/.luarocks/lib/lua/5.3/?.so" $LUA_CPATH

# dotnet-core completions
complete -f -c dotnet -a "(dotnet complete)"

# asdf
set -x ASDF_DIR $HOME/.asdf
set -x ASDF_DATA_DIR $ASDF_DIR
set -x ASDF_CONFIG_FILE $HOME/.asdfrc
set -x ASDF_BIN $ASDF_DIR/bin
set -x ASDF_SHIMS $ASDF_DIR/shims

set -x PATH $ASDF_BIN $PATH
set -x PATH $ASDF_SHIMS $PATH

# vim
type -q asdf
if test $status -eq 0
    # alias
    alias paleovim $ASDF_SHIMS/vim
    alias neovim $ASDF_SHIMS/nvim
    # abbr
    abbr -a pvim paleovim
    abbr -a nvim neovim
    abbr -a vim nvim
    abbr -a vip "nvim --headless '+Lazy! sync' +qa"
end

# aqua
# The directory path where aqua install tools
# default (linux and macOS): ${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua
# default (windows): ${HOME/AppData/Local}/aquaproj-aqua
set -x AQUA_ROOT_DIR $XDG_DATA_HOME/aqua
set -x AQUA_CONFIG_DIR $XDG_CONFIG_HOME/aqua/
set -x AQUA_BIN $AQUA_ROOT_DIR/bin

set -x PATH $AQUA_BIN $PATH
type -q aqua
if test $status -eq 0
    # Log level
    #set -x AQUA_LOG_LEVEL "info"
    # configuration file path
    set -x AQUA_CONFIG $AQUA_CONFIG_DIR/aqua.yaml
    # global configuration file paths separated by semicolon :
    set -x AQUA_GLOBAL_CONFIG $AQUA_CONFIG
    # policy file paths separated by semicolon :
    set -x AQUA_POLICY_CONFIG $AQUA_CONFIG_DIR/policy.yaml
    # If true, Policy is disabled (aqua >= v2.1.0)
    # NOTE: It's just idiot to care about security.
    set -x AQUA_DISABLE_POLICY true
    # If true, Lazy Install is disabled (aqua >= v2.9.0)
    #set -x AQUA_DISABLE_LAZY_INSTALL true
    # The maximum number of packages which are installed in parallel at the same time
    #set -x AQUA_MAX_PARALLELISM 5
    # GITHUB_TOKEN: GitHub Access Token.
    # This is required to install private repository's package
    #set -x AQUA_GITHUB_TOKEN ""
    # Log color setting (always|auto|never)
    #set -x AQUA_LOG_COLOR "always"
    # The progress bar is disabled by default, but you can enable it by setting the environment variable AQUA_PROGRESS_BAR to true
    set -x AQUA_PROGRESS_BAR true
    # Other
    #set -x AQUA_GOOS ""
    #set -x AQUA_GOARCH ""
    # AQUA_X_SYS_EXEC
    # https://aquaproj.github.io/docs/reference/execve-2/
    #set -x AQUA_X_SYS_EXEC false
    # If true, aqua outputs additional information such as description and link #2027 #2062 (aqua >= v2.9.0)
    #set -x AQUA_GENERATE_WITH_DETAIL false
end

# wsl2-ssh-agent
type -q wsl2-ssh-agent
if test $status -eq 0
    wsl2-ssh-agent > /dev/null 2>&1
    set -x SSH_AUTH_SOCK $HOME/.ssh/wsl2-ssh-agent.sock
end

# inshellisense
if test -f ~/.inshellisense/key-bindings.fish
    source ~/.inshellisense/key-bindings.fish
end

# sheldon
set -x SHELDON_CONFIG_DIR $XDG_CONFIG_HOME/sheldon/fish
set -x SHELDON_DATA_DIR $XDG_DATA_HOME/sheldon/fish

# eval "$(sheldon source)"

# PHP composer
set -x COMPOSER_CONFIG_HOME $XDG_CONFIG_HOME/composer
set -x COMPOSER_BIN_DIR $COMPOSER_CONFIG_HOME/vendor/bin

set -x PATH $COMPOSER_BIN_DIR $PATH

# cache
# thx: https://zenn.dev/ryoppippi/articles/de6c931cc1028f
if test $CONFIG_FISH -nt $CACHE_CONFIG_FISH
    mkdir -p $FISH_CACHE_DIR
    echo "" > $CACHE_CONFIG_FISH

    # Linuxbrew
    type -q brew
    if test $status -eq 0
        echo "# cache linuxbrew config" >> $CACHE_CONFIG_FISH
        /home/linuxbrew/.linuxbrew/bin/brew shellenv fish >> $CACHE_CONFIG_FISH
    end

    # rtx config
    #echo "# cache rtx shell-integration script" >> $CACHE_CONFIG_FISH
    #rtx activate fish >> $CACHE_CONFIG_FISH

    # starship config
    type -q starship
    if test $status -eq 0
        echo "# cache starship config" >> $CACHE_CONFIG_FISH
        starship init fish --print-full-init >> $CACHE_CONFIG_FISH
    end

    # navi
    type -q navi
    if test $status -eq 0
        echo "# cache navi config" >> $CACHE_CONFIG_FISH
        cat $XDG_CONFIG_HOME/navi/navi_widget.fish >> $CACHE_CONFIG_FISH
    end

    # pnpm
    type -q pnpm
    if test $status -eq 0
        echo "# cache pnpm tab completion" >> $CACHE_CONFIG_FISH
        cat $XDG_CONFIG_HOME/tabtab/fish/pnpm.fish >> $CACHE_CONFIG_FISH
    end

    # work pc only tools
    {{ if (eq .chezmoi.hostname "TanakaPC") }}
    echo "# work pc only tools config" >> $CACHE_CONFIG_FISH
    cat $XDG_CONFIG_HOME/{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").source_work_pc_only_tool_fish_1.value }} >> $CACHE_CONFIG_FISH
    {{ end }}
end
source $CACHE_CONFIG_FISH
