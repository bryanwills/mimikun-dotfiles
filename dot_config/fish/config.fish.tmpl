# Global
set -x LANG en_US.UTF-8
set -x GHQ_ROOT $HOME/ghq
set -x GHQ_SELECTOR fzf
set -x PIPENV_VENV_IN_PROJECT 1
set -x TODAY (date +"%Y/%m/%d")
set -x TZ "Asia/Tokyo"

# XDG Base Directory
set -x XDG_CONFIG_HOME $HOME/.config
set -x XDG_CACHE_HOME $HOME/.cache
set -x XDG_DATA_HOME $HOME/.local/share
set -x XDG_STATE_HOME $HOME/.local/state

# Fish paths
set -x FISH_CONFIG_DIR $XDG_CONFIG_HOME/fish
set -x FISH_COMPLETIONS_DIR $FISH_CONFIG_DIR/completions
set -x FISH_FUNCTIONS_DIR $FISH_CONFIG_DIR/functions
set -x FISH_CACHE_DIR $XDG_CACHE_HOME/fish

set -x CONFIG_FISH $FISH_CONFIG_DIR/config.fish
set -x CACHE_CONFIG_FISH $FISH_CACHE_DIR/config.fish

{{ if (eq .chezmoi.hostname "azusa") -}}
set -x GTK_IM_MODULE "fcitx"
set -x QT_IM_MODULE "fcitx"
set -x XMODIFIERS "@im=fcitx"
# CapsLock to Ctrl
setxkbmap -option ctrl:nocaps
{{ end -}}

# env-vars
set -x GITHUB_USERNAME "{{ (rbwFields "dotfiles-chezmoi").github_username.value }}"
{{ if eq .chezmoi.hostname "azusa" -}}
set -x OBSIDIAN_VAULT_ROOT "$HOME/Documents/Obsidian/mimikun"
set -x LG_CONFIG_FILE "$XDG_CONFIG_HOME/lazygit/linux_config.yml"
{{ else -}}
set -x WIN_HOME "/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
set -x OBSIDIAN_VAULT_ROOT "{{ (rbwFields "dotfiles-chezmoi").obsidian_vault_root_path.value }}"
set -x LG_CONFIG_FILE "$XDG_CONFIG_HOME/lazygit/wsl_config.yml"
{{ end -}}
set -x WORKSPACE "$GHQ_ROOT/github.com/$GITHUB_USERNAME"
set -x WORKSPACE_MIMIKUN "$GHQ_ROOT/github.com/mimikun"
set -x NVIM_DEV_PLUGINS "$WORKSPACE_MIMIKUN/dev-plugins"

# some services PATs
{{ if eq .chezmoi.hostname "TanakaPC" -}}
set -x GITHUB_PAT "{{ (rbwFields "dotfiles-chezmoi").github_pat.value }}"
set -x CODEBERG_PAT "{{ (rbwFields "dotfiles-chezmoi").codeberg_pat.value }}"
set -x GITEA_PAT "{{ (rbwFields "dotfiles-chezmoi").gitea_pat.value }}"
{{ end -}}

{{ if (ne .chezmoi.hostname "azusa") -}}
set -x windl "$WIN_HOME/Downloads"
set -x WIN_DESKTOP "$WIN_HOME/Desktop"
set -x WIN_DOCUMENTS "$WIN_HOME/Documents"

set -x obsidian_vault_root_path "$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"

set -x DISPLAY ":0"
{{ else -}}
set -x obsidian_vault_root_path "$OBSIDIAN_VAULT_ROOT"
{{ end -}}

set -x obsidian_vault_path $obsidian_vault_root_path
set -x obsidian_dailynote_path $obsidian_vault_path/001_DailyNotes
set -x obsidian $obsidian_dailynote_path
set dailynote_slug (date +"%Y年%m月%d日")
set -x today_dailynote "$obsidian_dailynote_path/$dailynote_slug.md"

set -x CHEZMOI_DIR "$XDG_DATA_HOME/chezmoi"

# aliases
alias rm "rm -i"
alias mkdir "mkdir -p"
alias untar "tar xvf"
alias patch "patch -p1 <"
alias imgcat "wezterm imgcat"

# abbrs
abbr --add --command sudo rm 'echo "sudo rm は使用禁止"'
abbr --add pueued_enable "systemctl --user enable pueue"
abbr --add pueued_start "systemctl --user start pueue"
abbr --add pueued_restart "systemctl --user restart pueue"
abbr --add ccd "chezmoi cd"
abbr --add chd "chezmoi cd"
abbr --add chec "chezmoi cd"
abbr --add cap "chezmoi apply"
abbr --add chp "chezmoi apply"
abbr --add chep "chezmoi apply"
abbr --add pu pueue
abbr --add puc "pueue clean -s"
abbr --add pucf "pueue clean"
abbr --add puf "pueue follow"
abbr --add pul "pueue log"
if command -v trashy >/dev/null 2>&1
    abbr --add trash "trashy"
end
abbr --add ghview "gh repo view -w"
abbr --add ghissue "gh issue ls"
abbr --add emacs "emacs --no-window-system"
abbr --add mmo "make morning-routine"
# https://github.com/ryoppippi/na.fish
abbr --add n -f _na
# rage
abbr --add ragee "rage -e -r $AGE_PUBKEY"
abbr --add raged "rage -d -i ~/.age/key.txt"
# forgejo-cli
abbr --add cb "fj --host codeberg.org"
# git subcommands(abbr)
abbr --add --command git ls 'ls-files'
abbr --add --command git graph 'log-graph'
abbr --add --command git file-diff 'diff --name-only'
abbr --add --command git amecomi 'commit --amend --no-edit'
abbr --add --command git cleanfetch 'fetch --all --prune --tags --prune-tags'
abbr --add --command git hash 'log --format=%H | sed -n 1p'
abbr --add --command git shallow-clone 'clone --depth 1'

set -x LOCALBIN $HOME/.local/bin

set -x PATH /usr/bin $PATH
set -x PATH /usr/local/bin $PATH
set -x PATH /usr/local/sbin $PATH
set -x PATH $HOME/go/bin $PATH
set -x PATH $HOME/.cargo/bin $PATH

set -x DENO_INSTALL $HOME/.deno
set -x PATH $DENO_INSTALL/bin $PATH

set -x STARSHIP_CONFIG_DIR $XDG_CONFIG_HOME/starship
set -x STARSHIP_CONFIG $STARSHIP_CONFIG_DIR/starship.toml
set -x STARSHIP_CACHE $STARSHIP_CONFIG_DIR/cache

#Ubuntu
set -x PATH /bin $PATH
set -x PATH /usr/games $PATH
set -x PATH /usr/sbin $PATH
set -x PATH /usr/local/games $PATH
set -x PATH /sbin $PATH
set -x PATH /snap/bin $PATH
set -x PATH $HOME/.fzf/bin $PATH
set -x PATH $HOME/.local/bin/ $PATH
set -x PATH $HOME/.npm-global/bin $PATH
set -x PATH $HOME/.dotnet/tools/ $PATH
set -x PATH $HOME/.gem/ruby/2.7.0/bin/ $PATH
set -x PATH $HOME/depot_tools $PATH
set -x PATH /usr/local/go/bin/ $PATH

set -x EDITOR nvim
set -x LESS "-R"
set -x LESSCHARSET "utf-8"
set -x PAGER less
set -x GIT_PAGER less

alias pip "python3 -m pip"
alias pipx "python3 -m pipx"

{{ if (ne .chezmoi.hostname "azusa") -}}
abbr --add open wsl-open
{{ end -}}
abbr --add zel zellij
alias pueuexec "pueue add --"

# Bun
set -x BUN_INSTALL $HOME/.bun
set -x PATH $BUN_INSTALL/bin $PATH

# fly.io
set -x FLYCTL_INSTALL $HOME/.fly
set -x PATH $FLYCTL_INSTALL/bin $PATH

# pnpm
set -x PNPM_HOME $XDG_DATA_HOME/pnpm
set -x PATH "$PNPM_HOME" $PATH

# work pc only tools?
{{ if (eq .chezmoi.hostname "TanakaPC") -}}
# JVM path
set -x JAVA_HOME $XDG_CACHE_HOME/coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_linux_hotspot_8u292b10.tar.gz/jdk8u292-b10
set -x PATH $XDG_CACHE_HOME/coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_linux_hotspot_8u292b10.tar.gz/jdk8u292-b10/bin $PATH

# coursier path
set -x PATH $XDG_DATA_HOME/coursier/bin $PATH
# windowsのpathとかぶる問題防止
alias cs $XDG_DATA_HOME/coursier/bin/cs
{{ end -}}

# cabal config
set -x PATH $HOME/.cabal/bin $PATH
set -x PATH $HOME/.ghcup/bin $PATH

# https://github.com/antfu/ni config
if command -v ni >/dev/null 2>&1
    set -x NI_CONFIG_FILE $XDG_CONFIG_HOME/ni/.nirc
end

# codon config
if command -v codon >/dev/null 2>&1
    set -x PATH $HOME/.codon/bin $PATH
end

# ls abbrs
# TODO: improve
if command -v eza >/dev/null 2>&1
    abbr --add ls "eza"
    abbr --add ll "eza -l --git-ignore"
    abbr --add la "eza -a --git-ignore"
    abbr --add lla "eza -l -a --git-ignore"
    abbr --add l1 "eza -1 --git-ignore"
    abbr --add ll1 "eza -l -1 --git-ignore"
    abbr --add lt "eza --tree --git-ignore"
    abbr --add lta "eza --tree -a --git-ignore"
    abbr --add llt "eza -l --tree --git-ignore"
    abbr --add ll1 "eza -l -1 --git-ignore"
    abbr --add lt1 "eza --tree -1 --git-ignore"
    abbr --add lat "eza -a --tree --git-ignore"
end

# Rye
set -x PATH $HOME/.rye/shims $PATH

# luarocks
set -x PATH $HOME/.luarocks/bin $PATH

set -x LUA_PATH "/usr/local/share/lua/5.3/?.lua"
set -x LUA_PATH "/usr/local/share/lua/5.3/?/init.lua" $LUA_PATH
set -x LUA_PATH "/usr/local/lib/lua/5.3/?.lua" $LUA_PATH
set -x LUA_PATH "/usr/local/lib/lua/5.3/?/init.lua" $LUA_PATH
set -x LUA_PATH "./?.lua" $LUA_PATH
set -x LUA_PATH "./?/init.lua" $LUA_PATH
set -x LUA_PATH "$HOME/.luarocks/share/lua/5.3/?.lua" $LUA_PATH
set -x LUA_PATH "$HOME/.luarocks/share/lua/5.3/?/init.lua" $LUA_PATH

set -x LUA_CPATH "/usr/local/lib/lua/5.3/?.so"
set -x LUA_CPATH "/usr/local/lib/lua/5.3/loadall.so" $LUA_CPATH
set -x LUA_CPATH "./?.so" $LUA_CPATH
set -x LUA_CPATH "$HOME/.luarocks/lib/lua/5.3/?.so" $LUA_CPATH

# dotnet-core completions
if command -v dotnet >/dev/null 2>&1
    complete -f -c dotnet -a "(dotnet complete)"
end

# aqua
set -x AQUA_ROOT_DIR $XDG_DATA_HOME/aqua
set -x AQUA_CONFIG_DIR $XDG_CONFIG_HOME/aqua/
set -x AQUA_BIN $AQUA_ROOT_DIR/bin

set -x PATH $AQUA_BIN $PATH

set -x AQUA_CONFIG $AQUA_CONFIG_DIR/aqua.yaml
set -x AQUA_GLOBAL_CONFIG $AQUA_CONFIG
set -x AQUA_POLICY_CONFIG $AQUA_CONFIG_DIR/policy.yaml
# If true, Policy is disabled
# NOTE: It's just idiot to care about security.
set -x AQUA_DISABLE_POLICY true
# The maximum number of packages which are installed in parallel at the same time
# If not human rights, AQUA_MAX_PARALLELISM = 1.
{{ if (eq .chezmoi.hostname "TanakaPC") -}}
set -x AQUA_MAX_PARALLELISM 1
{{ else -}}
set -x AQUA_MAX_PARALLELISM 5
{{ end -}}
set -x AQUA_PROGRESS_BAR true
set -x AQUA_GITHUB_TOKEN "{{ (rbwFields "dotfiles-chezmoi").aqua_github_token.value }}"

# inshellisense
if test -f "$HOME/.inshellisense/key-bindings.fish"
    source "$HOME/.inshellisense/key-bindings.fish"
end

# PHP composer
set -x COMPOSER_CONFIG_HOME $XDG_CONFIG_HOME/composer
set -x COMPOSER_BIN_DIR $COMPOSER_CONFIG_HOME/vendor/bin

set -x PATH $COMPOSER_BIN_DIR $PATH

# Julia
set -x PATH "$HOME/.juliaup/bin" $PATH

# mocword dict
set -x MOCWORD_DATA "$XDG_CACHE_HOME/mocword.sqlite"

# Neovide env-vars
## Functionality
### Frame
#set -x NEOVIDE_FRAME "full"
#set -x NEOVIDE_FRAME "none"
# macOS Only
#set -x NEOVIDE_FRAME "transparent"
# macOS Only
#set -x NEOVIDE_FRAME "buttonless"

### Maximized
# NOTE: not documented
#set -x NEOVIDE_MAXIMIZED true

### Multigrid
# NOTE: not documented
#set -x NEOVIDE_NO_MULTIGRID true

### Fork
#set -x NEOVIDE_FORK 0

### No Idle
#set -x NEOVIDE_IDLE 0

### Title
# macOS Only
# NOTE: not documented
#set -x NEOVIDE_TITLE_HIDDEN false

### sRGB
#set -x NEOVIDE_SRGB 0

### Tabs
#set -x NEOVIDE_TABS 0

### No VSync
#set -x NEOVIDE_VSYNC 0

### Neovim Binary
#set -x NEOVIM_BIN "/path/to/nvim"

### Wayland / X11
# Linux Only
# NOTE: Incomprehensible
#set -x NEOVIDE_APP_ID "wayland_app_id"
#set -x NEOVIDE_WM_CLASS_INSTANCE "x11_wm_class_instance"
#set -x NEOVIDE_WM_CLASS "x11_wm_class"

# nimble
set -x PATH $HOME/.nimble/bin $PATH

# age public keys
set -x AGE_PUBKEY_HOME "age1cktdwc8u4z76kawluyswaruyeg7eg6078rw3t0kkmx5wqkk40d2qzajn8y"
set -x AGE_PUBKEY_WORK "age1n03v0casqk2djs2jw3xq5ldpdjtp2s6r0u3uhtmd7zv9j2xuyf6qpl9x7l"
# TODO: config
set -x AGE_PUBKEY_AZUSA ""

{{ if (eq .chezmoi.hostname "TanakaPC") -}}
set -x AGE_PUBKEY "$AGE_PUBKEY_HOME"
{{ else -}}
set -x AGE_PUBKEY "$AGE_PUBKEY_WORK"
{{ end -}}

# golang
set -x GOPATH $HOME/go
set -x GOBIN $GOPATH/bin
set -x PATH $GOBIN $PATH

# cache
if test $CONFIG_FISH -nt $CACHE_CONFIG_FISH
    mkdir -p $FISH_CACHE_DIR
    echo "" > $CACHE_CONFIG_FISH

    # Linuxbrew
    if command -v brew >/dev/null 2>&1
        echo "# cache linuxbrew config" >> $CACHE_CONFIG_FISH
        /home/linuxbrew/.linuxbrew/bin/brew shellenv fish >> $CACHE_CONFIG_FISH
    end

    # mise config
    if command -v mise >/dev/null 2>&1
        echo "# cache mise shell-integration script" >> $CACHE_CONFIG_FISH
        mise activate fish >> $CACHE_CONFIG_FISH
        echo "# alias" >> $CACHE_CONFIG_FISH
        echo 'alias paleovim "$XDG_DATA_HOME/mise/installed/vim/ref-master/vim"' >> $CACHE_CONFIG_FISH
        echo "# abbr" >> $CACHE_CONFIG_FISH
        echo 'abbr --add pvim paleovim' >> $CACHE_CONFIG_FISH
    end

    # bob neovim version manager
    echo 'set -x BOB_CONFIG "$XDG_CONFIG_HOME/bob/config.toml"' >> $CACHE_CONFIG_FISH
    echo 'set -x PATH "$XDG_DATA_HOME/bob/nvim-bin" $PATH' >> $CACHE_CONFIG_FISH
    echo 'abbr --add vim nvim' >> $CACHE_CONFIG_FISH

    # starship config
    if command -v starship >/dev/null 2>&1
        echo "# cache starship config" >> $CACHE_CONFIG_FISH
        starship init fish --print-full-init >> $CACHE_CONFIG_FISH
    end

    # navi
    if command -v navi >/dev/null 2>&1
        echo "# cache navi config" >> $CACHE_CONFIG_FISH
        cat $XDG_CONFIG_HOME/navi/navi_widget.fish >> $CACHE_CONFIG_FISH
    end

    # pnpm
    if command -v pnpm >/dev/null 2>&1
        echo "# cache pnpm tab completion" >> $CACHE_CONFIG_FISH
        cat $XDG_CONFIG_HOME/tabtab/fish/pnpm.fish >> $CACHE_CONFIG_FISH
    end

    # atuin
    if command -v atuin >/dev/null 2>&1
        echo "# cache atuin config" >> $CACHE_CONFIG_FISH
        echo "atuin init fish | source" >> $CACHE_CONFIG_FISH
    end

    # rebar3
    if command -v rebar3 >/dev/null 2>&1
        echo "# cache rebar3 config" >> $CACHE_CONFIG_FISH
        echo 'set -x PATH "$XDG_CACHE_HOME/rebar3/bin" $PATH' >> $CACHE_CONFIG_FISH
    end

    # pay-respects
    if command -v pay-respects >/dev/null 2>&1
        echo "# cache pay-respects config" >> $CACHE_CONFIG_FISH
        echo "pay-respects fish --alias | source" >> $CACHE_CONFIG_FISH
    end

    # jujutsu
    if command -v jj >/dev/null 2>&1
        echo "# cache jujutsu config" >> $CACHE_CONFIG_FISH
        echo "jj util completion fish | source" >> $CACHE_CONFIG_FISH
    end

    # work pc only tools
    {{ if (eq .chezmoi.hostname "TanakaPC") -}}
    echo "# work pc only tools config" >> $CACHE_CONFIG_FISH
    cat $XDG_CONFIG_HOME/{{ (rbwFields "dotfiles-chezmoi").source_work_pc_only_tool_fish_1.value }} >> $CACHE_CONFIG_FISH
    {{ end -}}
end
source $CACHE_CONFIG_FISH

# NOTE: NEED end of config file!
# see: https://github.com/ajeetdsouza/zoxide#installation
zoxide init fish | source

# vim:ft=fish.chezmoitmpl
