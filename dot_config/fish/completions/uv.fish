complete -c uv -n "__fish_use_subcommand" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_use_subcommand" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_use_subcommand" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_use_subcommand" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_use_subcommand" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_use_subcommand" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_use_subcommand" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_use_subcommand" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_use_subcommand" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_use_subcommand" -l no-native-tls
complete -c uv -n "__fish_use_subcommand" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_use_subcommand" -l no-offline
complete -c uv -n "__fish_use_subcommand" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_use_subcommand" -l no-preview
complete -c uv -n "__fish_use_subcommand" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_use_subcommand" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_use_subcommand" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_use_subcommand" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_use_subcommand" -s h -l help -d 'Print help'
complete -c uv -n "__fish_use_subcommand" -s V -l version -d 'Print version'
complete -c uv -n "__fish_use_subcommand" -f -a "pip" -d 'Resolve and install Python packages'
complete -c uv -n "__fish_use_subcommand" -f -a "tool" -d 'Run and manage executable Python packages'
complete -c uv -n "__fish_use_subcommand" -f -a "python" -d 'Manage Python installations'
complete -c uv -n "__fish_use_subcommand" -f -a "init" -d 'Initialize a project'
complete -c uv -n "__fish_use_subcommand" -f -a "run" -d 'Run a command in the project environment'
complete -c uv -n "__fish_use_subcommand" -f -a "sync" -d 'Sync the project\'s dependencies with the environment'
complete -c uv -n "__fish_use_subcommand" -f -a "lock" -d 'Resolve the project requirements into a lockfile'
complete -c uv -n "__fish_use_subcommand" -f -a "add" -d 'Add one or more packages to the project requirements'
complete -c uv -n "__fish_use_subcommand" -f -a "remove" -d 'Remove one or more packages from the project requirements'
complete -c uv -n "__fish_use_subcommand" -f -a "tree" -d 'Display the dependency tree for the project'
complete -c uv -n "__fish_use_subcommand" -f -a "venv" -d 'Create a virtual environment'
complete -c uv -n "__fish_use_subcommand" -f -a "cache" -d 'Manage the cache'
complete -c uv -n "__fish_use_subcommand" -f -a "self" -d 'Manage the uv executable'
complete -c uv -n "__fish_use_subcommand" -f -a "clean" -d 'Clear the cache, removing all entries or those linked to specific packages'
complete -c uv -n "__fish_use_subcommand" -f -a "version" -d 'Display uv\'s version'
complete -c uv -n "__fish_use_subcommand" -f -a "generate-shell-completion" -d 'Generate shell completion'
complete -c uv -n "__fish_use_subcommand" -f -a "help" -d 'Display documentation for a command'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "compile" -d 'Compile a `requirements.in` file to a `requirements.txt` file'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "sync" -d 'Sync an environment with a `requirements.txt` file'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "install" -d 'Install packages into an environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "uninstall" -d 'Uninstall packages from an environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "freeze" -d 'List, in requirements format, packages installed in an environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "list" -d 'List, in tabular format, packages installed in an environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "show" -d 'Show information about one or more installed packages'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "tree" -d 'Display the dependency tree for an environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and not __fish_seen_subcommand_from compile; and not __fish_seen_subcommand_from sync; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from freeze; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from show; and not __fish_seen_subcommand_from tree; and not __fish_seen_subcommand_from check" -f -a "check" -d 'Verify installed packages have compatible dependencies'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s c -l constraint -d 'Constrain versions using the given requirements files' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l override -d 'Override versions using the given requirements files' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l extra -d 'Include optional dependencies from the extra group name; may be provided more than once' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s o -l output-file -d 'Write the compiled requirements to the given `requirements.txt` file' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l annotation-style -d 'The style of the annotation comments included in the output file, used to indicate the source of each package' -r -f -a "{line	'Render the annotations on a single, comma-separated line',split	'Render each annotation on its own line'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l custom-compile-command -d 'The header comment to include at the top of the output file generated by `uv pip compile`' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l python -d 'The Python interpreter against which to compile the requirements.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-binary -d 'Don\'t install pre-built wheels' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l only-binary -d 'Only use pre-built wheels; don\'t build source distributions' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s p -l python-version -d 'The minimum Python version that should be supported by the resolved requirements (e.g., `3.8` or `3.8.17`)' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l python-platform -d 'The platform for which requirements should be resolved' -r -f -a "{windows	'An alias for `x86_64-pc-windows-msvc`, the default target for Windows',linux	'An alias for `x86_64-unknown-linux-gnu`, the default target for Linux',macos	'An alias for `aarch64-apple-darwin`, the default target for macOS',x86_64-pc-windows-msvc	'An x86 Windows target',x86_64-unknown-linux-gnu	'An x86 Linux target. Equivalent to `x86_64-manylinux_2_17`',aarch64-apple-darwin	'An ARM-based macOS target, as seen on Apple Silicon devices',x86_64-apple-darwin	'An x86 macOS target',aarch64-unknown-linux-gnu	'An ARM64 Linux target. Equivalent to `aarch64-manylinux_2_17`',aarch64-unknown-linux-musl	'An ARM64 Linux target',x86_64-unknown-linux-musl	'An `x86_64` Linux target',x86_64-manylinux_2_17	'An `x86_64` target for the `manylinux_2_17` platform',x86_64-manylinux_2_28	'An `x86_64` target for the `manylinux_2_28` platform',x86_64-manylinux_2_31	'An `x86_64` target for the `manylinux_2_31` platform',aarch64-manylinux_2_17	'An ARM64 target for the `manylinux_2_17` platform',aarch64-manylinux_2_28	'An ARM64 target for the `manylinux_2_28` platform',aarch64-manylinux_2_31	'An ARM64 target for the `manylinux_2_31` platform'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-package -d 'Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile\'s `--unsafe-package` option' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l resolver -r -f -a "{backtracking	'',legacy	''}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l max-rounds -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l cert -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l client-cert -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l trusted-host -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l config -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l pip-args -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l all-extras -d 'Include all optional dependencies'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-all-extras
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l pre
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-deps -d 'Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting the requirements file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l deps
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-strip-extras -d 'Include extras in the output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l strip-extras
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-strip-markers -d 'Include environment markers in the output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l strip-markers
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-annotate -d 'Exclude comment annotations indicating the source of each package'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l annotate
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-header -d 'Exclude the comment header at the top of the generated output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l header
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l system -d 'Install packages into the system Python environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l generate-hashes -d 'Include distribution hashes in the output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-generate-hashes
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l legacy-setup-py -d 'Use legacy `setuptools` behavior when building source distributions without a `pyproject.toml`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-legacy-setup-py
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-build-isolation -d 'Disable isolation when building source distributions'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l build-isolation
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l build
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l universal -d 'Perform a universal resolution, attempting to generate a single `requirements.txt` output file that is compatible with all operating systems, architectures, and Python implementations'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-universal
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l emit-index-url -d 'Include `--index-url` and `--extra-index-url` entries in the generated output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-index-url
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l emit-find-links -d 'Include `--find-links` entries in the generated output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-find-links
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l emit-build-options -d 'Include `--no-binary` and `--only-binary` entries in the generated output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-build-options
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l emit-marker-expression -d 'Whether to emit a marker string indicating when it is known that the resulting set of pinned dependencies is valid'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-marker-expression
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l emit-index-annotation -d 'Include comment annotations indicating the index used to resolve each package (e.g., `# from https://pypi.org/simple`)'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-index-annotation
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l allow-unsafe
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-allow-unsafe
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l reuse-hashes
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-reuse-hashes
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l emit-trusted-host
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-trusted-host
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-config
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l emit-options
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-emit-options
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from compile" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s c -l constraint -d 'Constrain versions using the given requirements files' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s p -l python -d 'The Python interpreter into which packages should be installed.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l target -d 'Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l prefix -d 'Install packages into `lib`, `bin`, and other top-level folders under the specified directory, as if a virtual environment were present at that location' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-binary -d 'Don\'t install pre-built wheels' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l only-binary -d 'Only use pre-built wheels; don\'t build source distributions' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l python-version -d 'The minimum Python version that should be supported by the requirements (e.g., `3.7` or `3.7.9`)' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l python-platform -d 'The platform for which requirements should be installed' -r -f -a "{windows	'An alias for `x86_64-pc-windows-msvc`, the default target for Windows',linux	'An alias for `x86_64-unknown-linux-gnu`, the default target for Linux',macos	'An alias for `aarch64-apple-darwin`, the default target for macOS',x86_64-pc-windows-msvc	'An x86 Windows target',x86_64-unknown-linux-gnu	'An x86 Linux target. Equivalent to `x86_64-manylinux_2_17`',aarch64-apple-darwin	'An ARM-based macOS target, as seen on Apple Silicon devices',x86_64-apple-darwin	'An x86 macOS target',aarch64-unknown-linux-gnu	'An ARM64 Linux target. Equivalent to `aarch64-manylinux_2_17`',aarch64-unknown-linux-musl	'An ARM64 Linux target',x86_64-unknown-linux-musl	'An `x86_64` Linux target',x86_64-manylinux_2_17	'An `x86_64` target for the `manylinux_2_17` platform',x86_64-manylinux_2_28	'An `x86_64` target for the `manylinux_2_28` platform',x86_64-manylinux_2_31	'An `x86_64` target for the `manylinux_2_31` platform',aarch64-manylinux_2_17	'An ARM64 target for the `manylinux_2_17` platform',aarch64-manylinux_2_28	'An ARM64 target for the `manylinux_2_28` platform',aarch64-manylinux_2_31	'An ARM64 target for the `manylinux_2_31` platform'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l trusted-host -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l python-executable -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l cert -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l client-cert -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l config -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l pip-args -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l require-hashes -d 'Require a matching hash for each requirement'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-require-hashes
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l verify-hashes -d 'Validate any hashes provided in the requirements file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-verify-hashes
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l system -d 'Install packages into the system Python environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l break-system-packages -d 'Allow uv to modify an `EXTERNALLY-MANAGED` Python installation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-break-system-packages
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l legacy-setup-py -d 'Use legacy `setuptools` behavior when building source distributions without a `pyproject.toml`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-legacy-setup-py
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-build-isolation -d 'Disable isolation when building source distributions'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l build-isolation
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l build
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l allow-empty-requirements -d 'Allow sync of empty requirements, which will clear the environment of all packages'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-allow-empty-requirements
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l strict -d 'Validate the Python environment after completing the installation, to detect and with missing dependencies or other issues'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-strict
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l dry-run -d 'Perform a dry run, i.e., don\'t actually install anything but resolve the dependencies and print the resulting plan'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s a -l ask
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l user
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-config
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from sync" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s r -l requirement -d 'Install all packages listed in the given `requirements.txt` files' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s e -l editable -d 'Install the editable package based on the provided local file path' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s c -l constraint -d 'Constrain versions using the given requirements files' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l override -d 'Override versions using the given requirements files' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l extra -d 'Include optional dependencies from the extra group name; may be provided more than once' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s p -l python -d 'The Python interpreter into which packages should be installed.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l target -d 'Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l prefix -d 'Install packages into `lib`, `bin`, and other top-level folders under the specified directory, as if a virtual environment were present at that location' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-binary -d 'Don\'t install pre-built wheels' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l only-binary -d 'Only use pre-built wheels; don\'t build source distributions' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l python-version -d 'The minimum Python version that should be supported by the requirements (e.g., `3.7` or `3.7.9`)' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l python-platform -d 'The platform for which requirements should be installed' -r -f -a "{windows	'An alias for `x86_64-pc-windows-msvc`, the default target for Windows',linux	'An alias for `x86_64-unknown-linux-gnu`, the default target for Linux',macos	'An alias for `aarch64-apple-darwin`, the default target for macOS',x86_64-pc-windows-msvc	'An x86 Windows target',x86_64-unknown-linux-gnu	'An x86 Linux target. Equivalent to `x86_64-manylinux_2_17`',aarch64-apple-darwin	'An ARM-based macOS target, as seen on Apple Silicon devices',x86_64-apple-darwin	'An x86 macOS target',aarch64-unknown-linux-gnu	'An ARM64 Linux target. Equivalent to `aarch64-manylinux_2_17`',aarch64-unknown-linux-musl	'An ARM64 Linux target',x86_64-unknown-linux-musl	'An `x86_64` Linux target',x86_64-manylinux_2_17	'An `x86_64` target for the `manylinux_2_17` platform',x86_64-manylinux_2_28	'An `x86_64` target for the `manylinux_2_28` platform',x86_64-manylinux_2_31	'An `x86_64` target for the `manylinux_2_31` platform',aarch64-manylinux_2_17	'An ARM64 target for the `manylinux_2_17` platform',aarch64-manylinux_2_28	'An ARM64 target for the `manylinux_2_28` platform',aarch64-manylinux_2_31	'An ARM64 target for the `manylinux_2_31` platform'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l all-extras -d 'Include all optional dependencies'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-all-extras
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l pre
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-deps -d 'Ignore package dependencies, instead only installing those packages explicitly listed on the command line or in the requirements files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l deps
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l require-hashes -d 'Require a matching hash for each requirement'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-require-hashes
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l verify-hashes -d 'Validate any hashes provided in the requirements file'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-verify-hashes
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l system -d 'Install packages into the system Python environment'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l break-system-packages -d 'Allow uv to modify an `EXTERNALLY-MANAGED` Python installation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-break-system-packages
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l legacy-setup-py -d 'Use legacy `setuptools` behavior when building source distributions without a `pyproject.toml`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-legacy-setup-py
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-build-isolation -d 'Disable isolation when building source distributions'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l build-isolation
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l build
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l strict -d 'Validate the Python environment after completing the installation, to detect and with missing dependencies or other issues'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-strict
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l dry-run -d 'Perform a dry run, i.e., don\'t actually install anything but resolve the dependencies and print the resulting plan'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l disable-pip-version-check
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l user
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from install" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -s r -l requirement -d 'Uninstall all packages listed in the given requirements files' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -s p -l python -d 'The Python interpreter from which packages should be uninstalled.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l keyring-provider -d 'Attempt to use `keyring` for authentication for remote requirements files' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l target -d 'Uninstall packages from the specified `--target` directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l prefix -d 'Uninstall packages from the specified `--prefix` directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l system -d 'Use the system Python to uninstall packages'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l break-system-packages -d 'Allow uv to modify an `EXTERNALLY-MANAGED` Python installation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l no-break-system-packages
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l disable-pip-version-check
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from uninstall" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -s p -l python -d 'The Python interpreter for which packages should be listed.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l exclude-editable -d 'Exclude any editable packages from output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l strict -d 'Validate the Python environment, to detect packages with missing dependencies and other issues'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l no-strict
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l system -d 'List packages for the system Python'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l disable-pip-version-check
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from freeze" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l exclude -d 'Exclude the specified package(s) from the output' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l format -d 'Select the output format between: `columns` (default), `freeze`, or `json`' -r -f -a "{columns	'Display the list of packages in a human-readable table',freeze	'Display the list of packages in a `pip freeze`-like format, with one package per line alongside its version',json	'Display the list of packages in a machine-readable JSON format'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -s p -l python -d 'The Python interpreter for which packages should be listed.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -s e -l editable -d 'Only include editable projects'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l exclude-editable -d 'Exclude any editable packages from output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l strict -d 'Validate the Python environment, to detect packages with missing dependencies and other issues'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l no-strict
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l system -d 'List packages for the system Python'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l disable-pip-version-check
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l outdated
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from list" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -s p -l python -d 'The Python interpreter for which packages should be listed.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l strict -d 'Validate the Python environment, to detect packages with missing dependencies and other issues'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l no-strict
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l system -d 'List packages for the system Python'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l disable-pip-version-check
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from show" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -s d -l depth -d 'Maximum display depth of the dependency tree' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l prune -d 'Prune the given package from the display of the dependency tree' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l package -d 'Display only the specified packages' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -s p -l python -d 'The Python interpreter for which packages should be listed.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-dedupe -d 'Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l invert -d 'Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l show-version-specifiers -d 'Show the version constraint(s) imposed on each package'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l strict -d 'Validate the Python environment, to detect packages with missing dependencies and other issues'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-strict
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l system -d 'List packages for the system Python'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l disable-pip-version-check
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from tree" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -s p -l python -d 'The Python interpreter for which packages should be listed.' -r
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l system -d 'List packages for the system Python'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l no-system
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from pip; and __fish_seen_subcommand_from check" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -f -a "run" -d 'Run a tool'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -f -a "uvx" -d 'Run a tool.'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -f -a "install" -d 'Install a tool'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -f -a "list" -d 'List installed tools'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -f -a "uninstall" -d 'Uninstall a tool'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -f -a "update-shell" -d 'Ensure that the tool executable directory is on `PATH`'
complete -c uv -n "__fish_seen_subcommand_from tool; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from uvx; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from uninstall; and not __fish_seen_subcommand_from update-shell; and not __fish_seen_subcommand_from dir" -f -a "dir" -d 'Show the tools directory'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l from -d 'Use the given package to provide the command' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l with -d 'Include the following extra requirements' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s p -l python -d 'The Python interpreter to use to build the run environment.' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l pre
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l build
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l binary
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from run" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l from -d 'Use the given package to provide the command' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l with -d 'Include the following extra requirements' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s p -l python -d 'The Python interpreter to use to build the run environment.' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l pre
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l build
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l binary
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uvx" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l from -d 'The package to install commands from' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l with -d 'Include the following extra requirements' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s p -l python -d 'The Python interpreter to use to build the tool environment.' -r
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l pre
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l build
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l binary
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l force -d 'Force installation of the tool'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from install" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l show-paths -d 'Whether to display the path to each tool environment and installed executable'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from list" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l all -d 'Uninstall all tools'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from uninstall" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from update-shell" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l bin -d 'Show the directory into which `uv tool` will install executables'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tool; and __fish_seen_subcommand_from dir" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -f -a "list" -d 'List the available Python installations'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -f -a "install" -d 'Download and install Python versions'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -f -a "find" -d 'Search for a Python installation'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -f -a "pin" -d 'Pin to a specific Python version'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -f -a "dir" -d 'Show the uv Python installation directory'
complete -c uv -n "__fish_seen_subcommand_from python; and not __fish_seen_subcommand_from list; and not __fish_seen_subcommand_from install; and not __fish_seen_subcommand_from find; and not __fish_seen_subcommand_from pin; and not __fish_seen_subcommand_from dir; and not __fish_seen_subcommand_from uninstall" -f -a "uninstall" -d 'Uninstall Python versions'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l all-versions -d 'List all Python versions, including outdated patch versions'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l all-platforms -d 'List Python installations for all platforms'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l only-installed -d 'Only show installed Python versions, exclude available downloads'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from list" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -s r -l reinstall -d 'Reinstall the requested Python version, if it\'s already installed'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from install" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from find" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l resolved -d 'Write the resolved Python interpreter path instead of the request'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l no-resolved
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from pin" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from dir" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l all -d 'Uninstall all managed Python versions'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from python; and __fish_seen_subcommand_from uninstall" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from init" -l name -d 'The name of the project, defaults to the name of the directory' -r
complete -c uv -n "__fish_seen_subcommand_from init" -s p -l python -d 'The Python interpreter to use to determine the minimum supported Python version.' -r
complete -c uv -n "__fish_seen_subcommand_from init" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from init" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from init" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from init" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from init" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from init" -l no-readme -d 'Do not create a readme file'
complete -c uv -n "__fish_seen_subcommand_from init" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from init" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from init" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from init" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from init" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from init" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from init" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from init" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from init" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from init" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from init" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from init" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from init" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from init" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from init" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from run" -l extra -d 'Include optional dependencies from the extra group name; may be provided more than once' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l with -d 'Run with the given packages installed' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l with-requirements -d 'Run with all packages listed in the given `requirements.txt` files' -r
complete -c uv -n "__fish_seen_subcommand_from run" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from run" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from run" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from run" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from run" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from run" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from run" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from run" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l package -d 'Run the command in a specific package in the workspace' -r
complete -c uv -n "__fish_seen_subcommand_from run" -s p -l python -d 'The Python interpreter to use to build the run environment.' -r
complete -c uv -n "__fish_seen_subcommand_from run" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from run" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from run" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from run" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from run" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from run" -l all-extras -d 'Include all optional dependencies'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-all-extras
complete -c uv -n "__fish_seen_subcommand_from run" -l dev -d 'Include development dependencies'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-dev -d 'Omit development dependencies'
complete -c uv -n "__fish_seen_subcommand_from run" -l locked -d 'Assert that the `uv.lock` will remain unchanged'
complete -c uv -n "__fish_seen_subcommand_from run" -l frozen -d 'Install without updating the `uv.lock` file'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from run" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from run" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from run" -l pre
complete -c uv -n "__fish_seen_subcommand_from run" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from run" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from run" -l build
complete -c uv -n "__fish_seen_subcommand_from run" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from run" -l binary
complete -c uv -n "__fish_seen_subcommand_from run" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from run" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from run" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from run" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from run" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from run" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from run" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from run" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from run" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from run" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from run" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from run" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from sync" -l extra -d 'Include optional dependencies from the extra group name; may be provided more than once' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -s p -l python -d 'The Python interpreter to use to build the run environment.' -r
complete -c uv -n "__fish_seen_subcommand_from sync" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from sync" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from sync" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from sync" -l all-extras -d 'Include all optional dependencies'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-all-extras
complete -c uv -n "__fish_seen_subcommand_from sync" -l dev -d 'Include development dependencies'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-dev -d 'Omit development dependencies'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-clean -d 'Does not clean the environment'
complete -c uv -n "__fish_seen_subcommand_from sync" -l locked -d 'Assert that the `uv.lock` will remain unchanged'
complete -c uv -n "__fish_seen_subcommand_from sync" -l frozen -d 'Install without updating the `uv.lock` file'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from sync" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from sync" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from sync" -l pre
complete -c uv -n "__fish_seen_subcommand_from sync" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from sync" -l build
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from sync" -l binary
complete -c uv -n "__fish_seen_subcommand_from sync" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from sync" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from sync" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from sync" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from sync" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from sync" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from sync" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from sync" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from sync" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from sync" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from sync" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from sync" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from lock" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -s p -l python -d 'The Python interpreter to use to build the run environment.' -r
complete -c uv -n "__fish_seen_subcommand_from lock" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from lock" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from lock" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from lock" -l locked -d 'Assert that the `uv.lock` will remain unchanged'
complete -c uv -n "__fish_seen_subcommand_from lock" -l frozen -d 'Assert that a `uv.lock` exists, without updating it'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from lock" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from lock" -l pre
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from lock" -l build
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from lock" -l binary
complete -c uv -n "__fish_seen_subcommand_from lock" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from lock" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from lock" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from lock" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from lock" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from lock" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from lock" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from lock" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from lock" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from lock" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from lock" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from lock" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from add" -l optional -d 'Add the requirements to the specified optional dependency group' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l rev -d 'Specific commit to use when adding from Git' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l tag -d 'Tag to use when adding from git' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l branch -d 'Branch to use when adding from git' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l extra -d 'Extras to activate for the dependency; may be provided more than once' -r
complete -c uv -n "__fish_seen_subcommand_from add" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from add" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from add" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from add" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from add" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from add" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from add" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from add" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l package -d 'Add the dependency to a specific package in the workspace' -r
complete -c uv -n "__fish_seen_subcommand_from add" -s p -l python -d 'The Python interpreter into which packages should be installed.' -r
complete -c uv -n "__fish_seen_subcommand_from add" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from add" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from add" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from add" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from add" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from add" -l dev -d 'Add the requirements as development dependencies'
complete -c uv -n "__fish_seen_subcommand_from add" -l editable
complete -c uv -n "__fish_seen_subcommand_from add" -l no-editable -d 'Don\'t add the requirements as editables'
complete -c uv -n "__fish_seen_subcommand_from add" -l raw-sources -d 'Add source requirements to the `project.dependencies` section of the `pyproject.toml`'
complete -c uv -n "__fish_seen_subcommand_from add" -l locked -d 'Assert that the `uv.lock` will remain unchanged'
complete -c uv -n "__fish_seen_subcommand_from add" -l frozen -d 'Add the requirements without updating the `uv.lock` file'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from add" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from add" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from add" -l pre
complete -c uv -n "__fish_seen_subcommand_from add" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from add" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from add" -l build
complete -c uv -n "__fish_seen_subcommand_from add" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from add" -l binary
complete -c uv -n "__fish_seen_subcommand_from add" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from add" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from add" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from add" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from add" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from add" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from add" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from add" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from add" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from add" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from add" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from add" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from remove" -l optional -d 'Remove the requirements from the specified optional dependency group' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l reinstall-package -d 'Reinstall a specific package, regardless of whether it\'s already installed' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l refresh-package -d 'Refresh cached data for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l package -d 'Remove the dependency from a specific package in the workspace' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -s p -l python -d 'The Python interpreter into which packages should be installed.' -r
complete -c uv -n "__fish_seen_subcommand_from remove" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from remove" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from remove" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from remove" -l dev -d 'Remove the requirements from development dependencies'
complete -c uv -n "__fish_seen_subcommand_from remove" -l locked -d 'Assert that the `uv.lock` will remain unchanged'
complete -c uv -n "__fish_seen_subcommand_from remove" -l frozen -d 'Remove the requirements without updating the `uv.lock` file'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from remove" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from remove" -l reinstall -d 'Reinstall all packages, regardless of whether they\'re already installed'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-reinstall
complete -c uv -n "__fish_seen_subcommand_from remove" -l pre
complete -c uv -n "__fish_seen_subcommand_from remove" -l compile-bytecode -d 'Compile Python files to bytecode after installation'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-compile-bytecode
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from remove" -l build
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from remove" -l binary
complete -c uv -n "__fish_seen_subcommand_from remove" -l refresh -d 'Refresh all cached data'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-refresh
complete -c uv -n "__fish_seen_subcommand_from remove" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from remove" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from remove" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from remove" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from remove" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from remove" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from remove" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from remove" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from remove" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from remove" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from remove" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from tree" -s d -l depth -d 'Maximum display depth of the dependency tree' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l prune -d 'Prune the given package from the display of the dependency tree' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l package -d 'Display only the specified packages' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-build-package -d 'Don\'t build source distributions for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-binary-package -d 'Don\'t install pre-built wheels for a specific package' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -s P -l upgrade-package -d 'Allow upgrades for a specific package, ignoring pinned versions in any existing output file' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -l resolution -d 'The strategy to use when selecting between the different compatible versions for a given package requirement' -r -f -a "{highest	'Resolve the highest compatible version of each package',lowest	'Resolve the lowest compatible version of each package',lowest-direct	'Resolve the lowest compatible version of any direct dependencies, and the highest compatible version of any transitive dependencies'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -l prerelease -d 'The strategy to use when considering pre-release versions' -r -f -a "{disallow	'Disallow all pre-release versions',allow	'Allow all pre-release versions',if-necessary	'Allow pre-release versions if all versions of a package are pre-release',explicit	'Allow pre-release versions for first-party packages with explicit pre-release markers in their version requirements',if-necessary-or-explicit	'Allow pre-release versions if all versions of a package are pre-release, or if the package has an explicit pre-release marker in its version requirements'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -s C -l config-setting -d 'Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -s p -l python -d 'The Python interpreter for which packages should be listed.' -r
complete -c uv -n "__fish_seen_subcommand_from tree" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from tree" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from tree" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-dedupe -d 'Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated'
complete -c uv -n "__fish_seen_subcommand_from tree" -l invert -d 'Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package'
complete -c uv -n "__fish_seen_subcommand_from tree" -l show-version-specifiers -d 'Show the version constraint(s) imposed on each package'
complete -c uv -n "__fish_seen_subcommand_from tree" -l locked -d 'Assert that the `uv.lock` will remain unchanged'
complete -c uv -n "__fish_seen_subcommand_from tree" -l frozen -d 'Display the requirements without updating the `uv.lock` file'
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-build -d 'Don\'t build source distributions'
complete -c uv -n "__fish_seen_subcommand_from tree" -l build
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-binary -d 'Don\'t install pre-built wheels'
complete -c uv -n "__fish_seen_subcommand_from tree" -l binary
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from tree" -s U -l upgrade -d 'Allow package upgrades, ignoring pinned versions in any existing output file'
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-upgrade
complete -c uv -n "__fish_seen_subcommand_from tree" -l pre
complete -c uv -n "__fish_seen_subcommand_from tree" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from tree" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from tree" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from tree" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from tree" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from tree" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from tree" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from tree" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from tree" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from tree" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from tree" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from venv" -s p -l python -d 'The Python interpreter to use for the virtual environment.' -r
complete -c uv -n "__fish_seen_subcommand_from venv" -l prompt -d 'Provide an alternative prompt prefix for the virtual environment.' -r
complete -c uv -n "__fish_seen_subcommand_from venv" -s i -l index-url -d 'The URL of the Python package index (by default: <https://pypi.org/simple>)' -r
complete -c uv -n "__fish_seen_subcommand_from venv" -l extra-index-url -d 'Extra URLs of package indexes to use, in addition to `--index-url`' -r
complete -c uv -n "__fish_seen_subcommand_from venv" -s f -l find-links -d 'Locations to search for candidate distributions, in addition to those found in the registry indexes' -r
complete -c uv -n "__fish_seen_subcommand_from venv" -l index-strategy -d 'The strategy to use when resolving against multiple index URLs' -r -f -a "{first-index	'Only use results from the first index that returns a match for a given package name',unsafe-first-match	'Search for every package name across all indexes, exhausting the versions from the first index before moving on to the next',unsafe-best-match	'Search for every package name across all indexes, preferring the "best" version found. If a package version is in multiple indexes, only look at the entry for the first index'}"
complete -c uv -n "__fish_seen_subcommand_from venv" -l keyring-provider -d 'Attempt to use `keyring` for authentication for index URLs' -r -f -a "{disabled	'Do not use keyring for credential lookup',subprocess	'Use the `keyring` command for credential lookup'}"
complete -c uv -n "__fish_seen_subcommand_from venv" -l exclude-newer -d 'Limit candidate packages to those that were uploaded prior to the given date' -r
complete -c uv -n "__fish_seen_subcommand_from venv" -l link-mode -d 'The method to use when installing packages from the global cache' -r -f -a "{clone	'Clone (i.e., copy-on-write) packages from the wheel into the site packages',copy	'Copy packages from the wheel into the site packages',hardlink	'Hard link packages from the wheel into the site packages',symlink	'Symbolically link packages from the wheel into the site packages'}"
complete -c uv -n "__fish_seen_subcommand_from venv" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from venv" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from venv" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from venv" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from venv" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from venv" -l system -d 'Use the system Python to uninstall packages'
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-system
complete -c uv -n "__fish_seen_subcommand_from venv" -l seed -d 'Install seed packages (one or more of: `pip`, `setuptools`, and `wheel`) into the virtual environment'
complete -c uv -n "__fish_seen_subcommand_from venv" -l allow-existing -d 'Preserve any existing files or directories at the target path'
complete -c uv -n "__fish_seen_subcommand_from venv" -l system-site-packages -d 'Give the virtual environment access to the system site packages directory'
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-index -d 'Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`'
complete -c uv -n "__fish_seen_subcommand_from venv" -l clear
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-seed
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-pip
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-setuptools
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-wheel
complete -c uv -n "__fish_seen_subcommand_from venv" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from venv" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from venv" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from venv" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from venv" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from venv" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from venv" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from venv" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from venv" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from venv" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from venv" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -f -a "clean" -d 'Clear the cache, removing all entries or those linked to specific packages'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -f -a "prune" -d 'Prune all unreachable objects from the cache'
complete -c uv -n "__fish_seen_subcommand_from cache; and not __fish_seen_subcommand_from clean; and not __fish_seen_subcommand_from prune; and not __fish_seen_subcommand_from dir" -f -a "dir" -d 'Show the cache directory'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from clean" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from prune" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from cache; and __fish_seen_subcommand_from dir" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from self; and not __fish_seen_subcommand_from update" -f -a "update" -d 'Update uv to the latest version'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from self; and __fish_seen_subcommand_from update" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from clean" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from clean" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from clean" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from clean" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from clean" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from clean" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from clean" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from clean" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from clean" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from clean" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from clean" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from clean" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from clean" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from clean" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from clean" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from clean" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from clean" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from clean" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from clean" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from clean" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from version" -l output-format -r -f -a "{text	'Display the version as plain text',json	'Display the version as JSON'}"
complete -c uv -n "__fish_seen_subcommand_from version" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from version" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from version" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from version" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from version" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from version" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from version" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from version" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from version" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from version" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from version" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from version" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from version" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from version" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from version" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from version" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from version" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from version" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from version" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from version" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from generate-shell-completion" -s V -l version -d 'Print version'
complete -c uv -n "__fish_seen_subcommand_from help" -l color -d 'Control colors in output' -r -f -a "{auto	'Enables colored output only when the output is going to a terminal or TTY with support',always	'Enables colored output regardless of the detected environment',never	'Disables colored output'}"
complete -c uv -n "__fish_seen_subcommand_from help" -l python-preference -d 'Whether to prefer using Python installations that are already present on the system, or those that are downloaded and installed by uv' -r -f -a "{only-managed	'Only use managed Python installations; never use system Python installations',installed	'Prefer installed Python installations, only download managed Python installations if no system Python installation is found',managed	'Prefer managed Python installations over system Python installations, even if fetching is required',system	'Prefer system Python installations over managed Python installations',only-system	'Only use system Python installations; never use managed Python installations'}"
complete -c uv -n "__fish_seen_subcommand_from help" -l python-fetch -d 'Whether to automatically download Python when required' -r -f -a "{automatic	'Automatically fetch managed Python installations when needed',manual	'Do not automatically fetch managed Python installations; require explicit installation'}"
complete -c uv -n "__fish_seen_subcommand_from help" -l cache-dir -d 'Path to the cache directory' -r -F
complete -c uv -n "__fish_seen_subcommand_from help" -l config-file -d 'The path to a `uv.toml` file to use for configuration' -r -F
complete -c uv -n "__fish_seen_subcommand_from help" -l no-pager -d 'Disable pager when printing help'
complete -c uv -n "__fish_seen_subcommand_from help" -s q -l quiet -d 'Do not print any output'
complete -c uv -n "__fish_seen_subcommand_from help" -s v -l verbose -d 'Use verbose output'
complete -c uv -n "__fish_seen_subcommand_from help" -l no-color -d 'Disable colors; provided for compatibility with `pip`'
complete -c uv -n "__fish_seen_subcommand_from help" -l native-tls -d 'Whether to load TLS certificates from the platform\'s native certificate store'
complete -c uv -n "__fish_seen_subcommand_from help" -l no-native-tls
complete -c uv -n "__fish_seen_subcommand_from help" -l offline -d 'Disable network access, relying only on locally cached data and locally available files'
complete -c uv -n "__fish_seen_subcommand_from help" -l no-offline
complete -c uv -n "__fish_seen_subcommand_from help" -l preview -d 'Whether to enable experimental, preview features'
complete -c uv -n "__fish_seen_subcommand_from help" -l no-preview
complete -c uv -n "__fish_seen_subcommand_from help" -l isolated -d 'Avoid discovering a `pyproject.toml` or `uv.toml` file in the current directory or any parent directories'
complete -c uv -n "__fish_seen_subcommand_from help" -l show-settings -d 'Show the resolved settings for the current command'
complete -c uv -n "__fish_seen_subcommand_from help" -l no-progress -d 'Hides all progress outputs when set'
complete -c uv -n "__fish_seen_subcommand_from help" -s n -l no-cache -d 'Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation'
complete -c uv -n "__fish_seen_subcommand_from help" -s h -l help -d 'Print help'
complete -c uv -n "__fish_seen_subcommand_from help" -s V -l version -d 'Print version'
