# visible-menu: Use non-native macOS fullscreen, keep the menu bar visible
# true: Use non-native macOS fullscreen, hide the menu bar
# false: Use native macOS fullscreen
macos-non-native-fullscreen = false

# native: style uses the native macOS titlebar with zero customization.
# The titlebar will match your window theme (see window-theme).
# transparent: style is the same as "native" but the titlebar will be transparent and allow your window background color to come through.
# This makes a more seamless window appearance but looks a little less typical for a macOS application and may not work well with all themes.
# transparent: style will also update in real-time to dynamic changes to the window background color, i.e. via OSC 11. To make this more aesthetically pleasing, this only happens if the terminal is a window, tab, or split that borders the top of the window.
# This avoids a disjointed appearance where the titlebar color changes but all the topmost terminals don't match.
# tabs: style is a completely custom titlebar that integrates the tab bar into the titlebar.
# This titlebar always matches the background color of the terminal.
# There are some limitations to this style: On macOS 13 and below, saved window state will not restore tabs correctly.
# macOS 14 does not have this issue and any other macOS version has not been tested.
# hidden: style hides the titlebar.
# Unlike window-decoration = false, however, it does not remove the frame from the window or cause it to have squared corners.
# Changing to or from this option at run-time may affect existing windows in buggy ways.
# The top titlebar area of the window will continue to drag the window around and you will not be able to use the mouse for terminal events in this space.
# native
#macos-titlebar-style = native
# transparent
macos-titlebar-style = transparent
# tabs
#macos-titlebar-style = tabs
# hidden
#macos-titlebar-style = hidden

# visible: Show the proxy icon
# hidden: Hide the proxy icon
macos-titlebar-proxy-icon = visible
#macos-titlebar-proxy-icon = hidden

# TODO:
# macOS doesn't have a distinct "alt" key and instead has the "option"
# key which behaves slightly differently. On macOS by default, the
# option key plus a character will sometimes produces a Unicode character.
# For example, on US standard layouts option-b produces "âˆ«". This may be
# undesirable if you want to use "option" as an "alt" key for keybindings
# in terminal programs or shells.
# 
# This configuration lets you change the behavior so that option is treated
# as alt.
# 
# The default behavior (unset) will depend on your active keyboard
# layout. If your keyboard layout is one of the keyboard layouts listed
# below, then the default value is "true". Otherwise, the default
# value is "false". Keyboard layouts with a default value of "true" are:
# 
#   - U.S. Standard
#   - U.S. International
# 
# Note that if an *Option*-sequence doesn't produce a printable character, it
# will be treated as *Alt* regardless of this setting. (i.e. `alt+ctrl+a`).
# 
# Explicit values that can be set:
# 
# If `true`, the *Option* key will be treated as *Alt*. This makes terminal
# sequences expecting *Alt* to work properly, but will break Unicode input
# sequences on macOS if you use them via the *Alt* key.
# 
# You may set this to `false` to restore the macOS *Alt* key unicode
# sequences but this will break terminal sequences expecting *Alt* to work.
# 
# The values `left` or `right` enable this for the left or right *Option*
# key, respectively.
# 
# This does not work with GLFW builds.
macos-option-as-alt = 

# Whether to enable the macOS window shadow. The default value is true.
# With some window managers and window transparency settings, you may
# find false more visually appealing.
macos-window-shadow = true

# If true, Ghostty on macOS will automatically enable the "Secure Input"
# feature when it detects that a password prompt is being displayed.
# 
# "Secure Input" is a macOS security feature that prevents applications from
# reading keyboard events. This can always be enabled manually using the
# `Ghostty > Secure Keyboard Entry` menu item.
# 
# Note that automatic password prompt detection is based on heuristics
# and may not always work as expected. Specifically, it does not work
# over SSH connections, but there may be other cases where it also
# doesn't work.
# 
# A reason to disable this feature is if you find that it is interfering
# with legitimate accessibility software (or software that uses the
# accessibility APIs), since secure input prevents any application from
# reading keyboard events.
macos-auto-secure-input = true

# If true, Ghostty will show a graphical indication when secure input is
# enabled. This indication is generally recommended to know when secure input
# is enabled.
# 
# Normally, secure input is only active when a password prompt is displayed
# or it is manually (and typically temporarily) enabled. However, if you
# always have secure input enabled, the indication can be distracting and
# you may want to disable it.
macos-secure-input-indication = true

# Customize the macOS app icon.
# 
# This only affects the icon that appears in the dock, application
# switcher, etc. This does not affect the icon in Finder because
# that is controlled by a hardcoded value in the signed application
# bundle and can't be changed at runtime. For more details on what
# exactly is affected, see the `NSApplication.icon` Apple documentation;
# that is the API that is being used to set the icon.
# 
# Valid values:
# 
#  * `official` - Use the official Ghostty icon.
#  * `custom-style` - Use the official Ghostty icon but with custom
#    styles applied to various layers. The custom styles must be
#    specified using the additional `macos-icon`-prefixed configurations.
#    The `macos-icon-ghost-color` and `macos-icon-screen-color`
#    configurations are required for this style.
# 
# WARNING: The `custom-style` option is _experimental_. We may change
# the format of the custom styles in the future. We're still finalizing
# the exact layers and customization options that will be available.
# 
# Other caveats:
# 
#   * The icon in the update dialog will always be the official icon.
#     This is because the update dialog is managed through a
#     separate framework and cannot be customized without significant
#     effort.
# 
macos-icon = official

# The material to use for the frame of the macOS app icon.
# 
# Valid values:
# 
#  * `aluminum` - A brushed aluminum frame. This is the default.
#  * `beige` - A classic 90's computer beige frame.
#  * `plastic` - A glossy, dark plastic frame.
#  * `chrome` - A shiny chrome frame.
# 
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-frame = aluminum

# The color of the ghost in the macOS app icon.
# 
# The format of the color is the same as the `background` configuration;
# see that for more information.
# 
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
# 
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-ghost-color = 

# The color of the screen in the macOS app icon.
# 
# The screen is a gradient so you can specify multiple colors that make up the gradient.
# Colors should be separated by commas. The format of the color is the same as the `background` configuration;
# see that for more information.
# 
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
# 
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-screen-color = 

# off: Disable auto-updates
# check: Check for updates and notify the user if an update is available, but do not automatically download or install the update
# download: Check for updates, automatically download the update, notify the user, but do not automatically install the update
#auto-update = off
auto-update = check
#auto-update = download

# stable: Tagged releases such as "1.0.0"
# tip: Pre-release versions
auto-update-channel = stable
#auto-update-channel = tip

# ---------- kokomade --------------------
