# Use cache and speedup
# thx: https://zenn.dev/ryoppippi/articles/de6c931cc1028f
$env:CACHE_PROFILE_DIR = Join-Path -Path $env:HOME -ChildPath ".cache/powershell"
$env:CACHE_PROFILE = Join-Path -Path $env:CACHE_PROFILE_DIR -ChildPath "cache-profile.ps1"
$CACHE_PROFILE = $env:CACHE_PROFILE

$majorVer = $PSVersionTable.PSVersion.Major

if ((Test-Path $PROFILE) -and (Test-Path $CACHE_PROFILE)) {
    if ((Get-Item $PROFILE).LastWriteTime -gt (Get-Item $CACHE_PROFILE).LastWriteTime) {
        $cond = $true
    } else {
        $cond = $false
    }
} elseif ((Test-Path $PROFILE) -and !(Test-Path $CACHE_PROFILE)) {
    $cond = $true
} else {
    $cond = $false
}

if ($cond) {
    New-Item $env:CACHE_PROFILE_DIR -ItemType Directory -Force 2>&1 > $null
    New-Item $env:CACHE_PROFILE -ItemType File -Value "" -Force 2>&1 > $null

    # using namespace first
    $namespace1 = "using namespace System.Management.Automation.Language"
    $namespace2 = "using namespace System.Management.Automation"
    Write-Output $namespace1 >> $env:CACHE_PROFILE
    Write-Output $namespace2 >> $env:CACHE_PROFILE

    # starship setup
    Write-Output "# cache starship setup" >> $env:CACHE_PROFILE
    starship init powershell --print-full-init >> $env:CACHE_PROFILE

    # starship completion
    Write-Output "# cache starship completion" >> $env:CACHE_PROFILE
    $starship_completion = starship completions powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $starship_completion >> $env:CACHE_PROFILE

    # wezterm completion
    Write-Output "# cache wezterm completion" >> $env:CACHE_PROFILE
    $wezterm_completion = wezterm shell-completion --shell power-shell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $wezterm_completion >> $env:CACHE_PROFILE

    # rustup completion
    Write-Output "# cache rustup completion" >> $env:CACHE_PROFILE
    $rustup_completion = rustup completions powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $rustup_completion >> $env:CACHE_PROFILE

    # chezmoi completion
    Write-Output "# cache chezmoi completion" >> $env:CACHE_PROFILE
    chezmoi completion powershell >> $env:CACHE_PROFILE

    # github-cli completion
    Write-Output "# cache github-cli completion" >> $env:CACHE_PROFILE
    gh completion -s powershell >> $env:CACHE_PROFILE

    # just completion
    # Powershell v7以上のときのみ読み込む
    if ($majorVer -eq 7) {
        Write-Output "# cache just completion" >> $env:CACHE_PROFILE
        $just_completion = just --completions powershell |
            ForEach-Object { $_ -replace $namespace1, "" } |
            ForEach-Object { $_ -replace $namespace2, "" }
        Write-Output $just_completion >> $env:CACHE_PROFILE
    }

    # zoxide setup
    Write-Output "# cache zoxide setup" >> $env:CACHE_PROFILE
    zoxide init powershell >> $env:CACHE_PROFILE

    # zoxide completion
    Write-Output "# cache zoxide completion" >> $env:CACHE_PROFILE
    $zoxideCompleteFilePath = Join-Path -Path $env:GHQ_ROOT -ChildPath "github.com\ajeetdsouza\zoxide\contrib\completions\_zoxide.ps1"
    if (Test-Path($zoxideCompleteFilePath)) {
        $zoxide_completion = Get-Content $zoxideCompleteFilePath |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    }
    Write-Output $zoxide_completion >> $env:CACHE_PROFILE

    # ripgrep completion
    Write-Output "# cache ripgrep completion" >> $env:CACHE_PROFILE
    $ripgrep_completion = rg --generate complete-powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $ripgrep_completion >> $env:CACHE_PROFILE
}

# Loading from cache profile
. $env:CACHE_PROFILE

#posh-git git
Import-Module posh-git
# PSReadLine
Import-Module PSReadLine

$env:EDITOR = "nvim"

# Obsidian vault
{{ if eq .chezmoi.hostname "TanakaPC" }}
$obsidian_vault_root = {{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").obsidian_vault_root_path.value }}
{{ else }}
$obsidian_vault_root = {{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").obsidian_vault_root_path.value }}
{{ end }}

$env:WIN_DOCUMENTS = Join-Path -Path $env:WIN_HOME -ChildPath "Documents"
$win_documents = $env:WIN_DOCUMENTS
$env:windl = Join-Path -Path $env:WIN_HOME -ChildPath "Downloads"
$windl = $env:windl
$env:WIN_DESKTOP = Join-Path -Path $env:WIN_HOME -ChildPath "Desktop"
$win_desktop = $env:WIN_DESKTOP

$env:WORKSPACE = Join-Path -Path $GHQ_ROOT -ChildPath $GITHUB_USERNAME
$WORKSPACE = $env:WORKSPACE

$env:obsidian_vault_root_path = Join-Path -Path $env:WIN_DOCUMENTS -ChildPath "$env:obsidian_vault_root"
$obsidian_vault_root_path = $env:obsidian_vault_root_path
$env:obsidian_vault_path = $env:obsidian_vault_root_path
$obsidian_vault_path = $env:obsidian_vault_path
$env:obsidian_dailynote_path = Join-Path -Path $obsidian_vault_path -ChildPath "001_DailyNotes"
$obsidian_dailynote_path = $env:obsidian_dailynote_path
$env:obsidian = $obsidian_dailynote_path
$obsidian = $env:obsidian

# alias bd
function Set-ParentLocation() {
    Set-Location ..
}
Set-Alias -Name bd -Value Set-ParentLocation

# alias touch
Set-Alias -Name touch -Value New-Item

# alias ls (lsd or eza)
Get-Command eza -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    # alias ls eza
    Set-Alias -Name ls -Value eza
    # eza aliases
    function Invoke-EzaTree() {
        eza -T
    }
    Set-Alias -Name lt -Value Invoke-EzaTree
    function Invoke-EzaLa() {
        eza -la
    }
    Set-Alias -Name la -Value Invoke-EzaLa
}

# alias vim
Get-Command neovim -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    # alias vim neovim
    Set-Alias -Name vim -Value neovim
}

# alias gcd
$env:PSGhqPath = Join-Path -Path $env:GHQ_ROOT -ChildPath "github.com/mimikun/PSGhq/Set-GhqLocation.ps1"
if (Test-Path($env:PSGhqPath)) {
    . $env:PSGhqPath
    Set-Alias -Name gcd -Value Set-GhqLocation
}

# alias editorconfig Invoke-GenerateEditorConfig
function Invoke-GenerateEditorConfig() {
    Get-Item -Path .\.editorconfig -ErrorAction Ignore
    $res = $?
    if (!$res) {
        Write-Output ".editorconfig not exist."
        Write-Output "Creating .editorconfig."
        Copy-Item -Path $env:USERPROFILE\.editorconfig-template -Destination .\.editorconfig
    }
}
Set-Alias -Name editorconfig Invoke-GenerateEditorConfig

# PSReadLine settings
Set-PSReadLineKeyHandler `
    -Key Ctrl+g `
    -BriefDescription "Run ghq cd" `
    -LongDescription "Run ghq cd" `
    -ScriptBlock {
        Set-GhqLocation
    }

# alias chezmoi_cd
function Set-ChezmoiDirLocation() {
    Set-Location $env:CHEZMOI_DIR
}
Set-Alias -Name chezmoi_cd -Value Set-ChezmoiDirLocation

if ($majorVer -eq 7) {
    # inshellisense pwsh v7
    $inshellisensePath = Join-Path -Path $env:HOME -ChildPath ".inshellisense/key-bindings-pwsh.ps1"
    if (Test-Path $inshellisensePath -PathType Leaf) {
        . $inshellisensePath
    }
}

# aqua
# The directory path where aqua install tools
# default (linux and macOS): ${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua
# default (windows): ${HOME/AppData/Local}/aquaproj-aqua
$env:AQUA_ROOT_DIR = Join-Path -Path $env:HOME -ChildPath ".local/share/aqua"
$env:AQUA_CONFIG_DIR = Join-Path -Path $env:HOME -ChildPath ".config/aqua"
$env:AQUA_BIN = Join-Path -Path $env:AQUA_ROOT_DIR -ChildPath "bin"

Get-Command aqua -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    # Log level
    #$env:AQUA_LOG_LEVEL = "info"
    # configuration file path
    $env:AQUA_CONFIG = Join-Path -Path $env:AQUA_CONFIG_DIR -ChildPath "aqua.yaml"
    # global configuration file paths separated by semicolon :
    $env:AQUA_GLOBAL_CONFIG = $env:AQUA_CONFIG
    # policy file paths separated by semicolon :
    $env:AQUA_POLICY_CONFIG = Join-Path -Path $env:AQUA_CONFIG_DIR -ChildPath "policy.yaml"
    # If true, Policy is disabled (aqua >= v2.1.0)
    # NOTE: It's just idiot to care about security.
    $env:AQUA_DISABLE_POLICY = $True
    # If true, Lazy Install is disabled (aqua >= v2.9.0)
    #$env:AQUA_DISABLE_LAZY_INSTALL = $True
    # The maximum number of packages which are installed in parallel at the same time
    #$env:AQUA_MAX_PARALLELISM = 5
    # GITHUB_TOKEN: GitHub Access Token.
    # This is required to install private repository's package
    #$env:AQUA_GITHUB_TOKEN = ""
    # Log color setting (always|auto|never)
    #$env:AQUA_LOG_COLOR = "always"
    # The progress bar is disabled by default, but you can enable it by setting the environment variable AQUA_PROGRESS_BAR to true
    $env:AQUA_PROGRESS_BAR = $True
    # Other
    #$env:AQUA_GOOS = ""
    #$env:AQUA_GOARCH = ""
    # AQUA_X_SYS_EXEC
    # https://aquaproj.github.io/docs/reference/execve-2/
    #$env:AQUA_X_SYS_EXEC = $False
    # If true, aqua outputs additional information such as description and link #2027 #2062 (aqua >= v2.9.0)
    #$env:AQUA_GENERATE_WITH_DETAIL = $False
}
